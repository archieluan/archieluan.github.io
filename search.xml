<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello world，我叫栾书航！</title>
    <url>/2023/02/17/my-first-blog/</url>
    <content><![CDATA[<p>​	</p>
<hr>
<p>大家好，我叫栾书航，一个集阳光、帅气与智慧于一身的男人…</p>
<p>​	一直很想搭建一个人网站，但是因为时间问题被耽误了。争取在投递实习岗位前，尽快将它搭建补充起来。也算是补充自己对于网页设计的知识储备，这是一个非常好的锻炼精力。</p>
<p>​	对于这个博客，我的初步计划主要以分享个人作品、杂七杂八的经验为主。通过不断学习，来慢慢将自己对于网页和生活中的idea加入其中。</p>
<p>​	<strong>So, be knowledgeable, be healthy, be safe!</strong></p>
]]></content>
      <categories>
        <category>通告</category>
      </categories>
      <tags>
        <tag>通告</tag>
      </tags>
  </entry>
  <entry>
    <title>经验：解决了关于Hexo本地图片无法加载的问题</title>
    <url>/2023/02/18/solve-the-bug-of-the-image/</url>
    <content><![CDATA[<p>这几天上网找了很多方式都没有完美解决问题，后来查看了官方文档后终于解决了问题（完美解决），现在贴出来如下。建议以后大家遇到了问题也先去看看官方文档：<a class="link" href="https://hexo.io/zh-cn/docs">https://hexo.io/zh-cn/docs <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="解决方案如下："><a href="#解决方案如下：" class="headerlink" title="解决方案如下："></a>解决方案如下：</h3><h4 id="1-更改配置："><a href="#1-更改配置：" class="headerlink" title="1. 更改配置："></a>1. 更改配置：</h4><p>在根目录下配置文件<code>_config.yml</code> 中有 <code>post_asset_folder:false改为true</code>。这样在建立文件时，<code>Hexo</code>会自动建立一个与文章同名的文件夹，这样就可以把与该文章相关的所有资源（图片）都放到那个文件夹里方便后面引用。如这里我放了一张test.jpg的图片。</p>
<h4 id="2-git-bash安装插件："><a href="#2-git-bash安装插件：" class="headerlink" title="2.git bash安装插件："></a>2.git bash安装插件：</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/7ym0n/hexo-asset-image --save</span><br></pre></td></tr></table></figure></div>

<p>（这是个修改过的插件，经测试无问题），使用这个插件来引入图片，而不是网上那些方法里说的用传统md语法相对路径的方法。</p>
<h4 id="3-MD图片代码："><a href="#3-MD图片代码：" class="headerlink" title="3. MD图片代码："></a>3. MD图片代码：</h4><p>（最重要的！！！）插入图片时用这种方式：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img test.jpg This is an test image %&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　　　　<em><strong>*注意”asset_img”是前缀！！（我写错了很多次），其中test.jpg就是你要引用的图片，我这里就是test.jpg，后面的This is an test image是图片描述，可以自己修改。*</strong></em></p>
<h4 id="4-这样就能成功显示了，测试下吧："><a href="#4-这样就能成功显示了，测试下吧：" class="headerlink" title="4. 这样就能成功显示了，测试下吧："></a>4. 这样就能成功显示了，测试下吧：</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>







<h3 id><a href="#" class="headerlink" title></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><p>部分转载于:<a class="link" href="https://www.cnblogs.com/Jesee/p/11234387.html">https://www.cnblogs.com/Jesee/p/11234387.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>               </p>
]]></content>
      <categories>
        <category>经验笔记</category>
        <category>程序向</category>
        <category>网页设计</category>
      </categories>
      <tags>
        <tag>Debug</tag>
        <tag>网页设计</tag>
        <tag>bug烦死了！</tag>
      </tags>
  </entry>
  <entry>
    <title>更新：简历与作品集</title>
    <url>/2023/02/17/my-resume-and-artstation-link/</url>
    <content><![CDATA[<p>上传了简历和作品集，在右上方栏目的“ABOUT”中，接下来我会通过发布文章来展示一些其他作品，并开放留言板模块，希望得到大佬们的指点~</p>
  <img lazyload src="/images/loading.svg" data-src="/2023/02/17/my-resume-and-artstation-link/my-resume-and-artstation-link.png" class title="This is a screenshot">  
]]></content>
      <categories>
        <category>通告</category>
      </categories>
      <tags>
        <tag>通告</tag>
      </tags>
  </entry>
  <entry>
    <title>作品：《戒之歌》-Animation</title>
    <url>/2020/10/15/Ring-Animation/</url>
    <content><![CDATA[<h3 id="Introduction："><a href="#Introduction：" class="headerlink" title="Introduction："></a>Introduction：</h3><p>中文名：《戒之歌》，英文名：《The darkest hour before the dawn》。本科期间创作的，CG独立动画，设想的背景非常宏大，设定也很多。</p>
<p>熟练掌握了maya to UE4的角色动画创建，和迷雾、火焰特效创建方法。</p>
<h3 id="Background"><a href="#Background" class="headerlink" title="Background:"></a>Background:</h3><p>在自然之婴诞生之时，时空产生平行空间，两个误入其中的不同种族分别带走了其不同的灵魂部分，并被扶养长大。因为在残酷的战场中，切身感受到身边的杀戮与残酷，因此激发了自然之子的融合，拥有沟通万物之力的她成功拔下战场中心的守护之剑并沟通巨龙平息战争。</p>
<h3 id="Pipeline："><a href="#Pipeline：" class="headerlink" title="Pipeline："></a>Pipeline：</h3><p>该作品主要由3dsmax、UE4、AE完成。</p>
<h3 id="Video"><a href="#Video" class="headerlink" title="Video:"></a>Video:</h3><iframe src="//player.bilibili.com/player.html?aid=395546796&bvid=BV15o4y1k7gA&cid=1041232465&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="900" height="450"> </iframe>



<h3 id="Highres-Screenshot："><a href="#Highres-Screenshot：" class="headerlink" title="Highres Screenshot："></a>Highres Screenshot：</h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/012a1wkmcbvc5sznjuvr0d3431.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《戒之歌》-Animation"></p>
<h3 id><a href="#" class="headerlink" title></a><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01kdgnvpph0osdrohm627u3437.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《戒之歌》-Animation"></h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01m8xb5k0shvxouoy0dq2s3830.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《戒之歌》-Animation"></p>
<h3 id="-1"><a href="#-1" class="headerlink" title></a><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01wfmhffxj8hlx0ycr8l4z3337.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《戒之歌》-Animation"></h3><h3 id="Game-Screenshot"><a href="#Game-Screenshot" class="headerlink" title="Game Screenshot:"></a>Game Screenshot:</h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/010ano5ganyeo16of0ri0n3738.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《戒之歌》-Animation"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01j2k0ezu9icii6qhwa74t3434.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《戒之歌》-Animation"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01lncidbyxd6vgflc4hji33531.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《戒之歌》-Animation"></p>
]]></content>
      <categories>
        <category>作品集</category>
        <category>美术向</category>
        <category>CG动画</category>
      </categories>
      <tags>
        <tag>个人作品</tag>
        <tag>3D动画</tag>
        <tag>CG</tag>
      </tags>
  </entry>
  <entry>
    <title>作品：《MoJee》-Animation</title>
    <url>/2021/01/11/MoJee-Animation/</url>
    <content><![CDATA[<h3 id="Introduction："><a href="#Introduction：" class="headerlink" title="Introduction："></a>Introduction：</h3><p>《MoJee》，毕业设计短片，三维独立动画，全流程创作，制作时长两个半月。</p>
<p>第一部由UE4引擎创作的独立动画，加深了对于DCC软件 to UE4管线的认识，熟悉掌握了场景搭建、资源导入与材质蓝图创建、骨骼重定向、灯光、过场动画等技术。</p>
<h3 id="Background"><a href="#Background" class="headerlink" title="Background:"></a>Background:</h3><p>MoJee因爱而生，是生活在原始森林里的小野人，长期的营养不良导致他非常瘦弱，令人怜惜。但他心地淳朴，乐观且活泼。他一生都在追求着功夫的最高境界，为此独自离开族群，飘洋过海来到仙岛，向猴子大师求学武艺。</p>
<p>而这个小野人也代表着作者本身，我希望像他一样，千山万水，只为追求心中的那个梦想。</p>
<h3 id="Pipeline："><a href="#Pipeline：" class="headerlink" title="Pipeline："></a>Pipeline：</h3><p>该作品主要由3dsmax、Maya、UE4、AE完成。</p>
<h3 id="Video"><a href="#Video" class="headerlink" title="Video:"></a>Video:</h3><h4 id="Flash-video"><a href="#Flash-video" class="headerlink" title="Flash video:"></a>Flash video:</h4><iframe src="//player.bilibili.com/player.html?aid=993001482&bvid=BV1Yx4y1K7KH&cid=1041225573&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="900" height="450"> </iframe>



<h3 id="Highres-Screenshot："><a href="#Highres-Screenshot：" class="headerlink" title="Highres Screenshot："></a>Highres Screenshot：</h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01hy8bmn6vhdsmhjmpawyg3132.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01ywbvmk669v0nymid5xli3133.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01i466geus7jd3xwslulrf3735.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01ppavrvfvv6ktca7csxjo3732.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01qjnspwwe9qwfwpdbi9sh3034.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01gczsykiqombldc06qxud3838.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></p>
<h3 id><a href="#" class="headerlink" title></a><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01h1lumbww3dvj9dos6d8u3830.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01no0aobxmgbtign5ov7xb3030.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/019sq7jtampst6ufr6fawr3338.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01e2ewfbthr125ki9xom4l3232.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01vk7ceboraocevttwndss3830.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01u8uo8oisso2ccb6dcplb3131.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01sq7fvdabqmnswg2unksd3534.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01birmc0q0o4te3bwy0iib3132.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01cfqejpwkbskzyl00mm6i3637.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01w4xl3ripj9iiwfdudcdt3335.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></p>
<h3 id="-1"><a href="#-1" class="headerlink" title></a><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01rv3isfpowzq1hcekxq3n3634.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01p9pmsf75wvgmese3srsf3037.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Animation"></h3>]]></content>
      <categories>
        <category>作品集</category>
        <category>美术向</category>
        <category>卡通动画</category>
      </categories>
      <tags>
        <tag>个人作品</tag>
        <tag>3D动画</tag>
        <tag>卡通</tag>
        <tag>引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>作品：《Feast》-Animation</title>
    <url>/2022/06/02/Feast-Animation/</url>
    <content><![CDATA[<h3 id="Introduction："><a href="#Introduction：" class="headerlink" title="Introduction："></a>Introduction：</h3><p>《Feast》，SCAD研一的团队合作项目, 风格化卡通动画。</p>
<p><strong>主要负责：</strong>角色模型+绑定+动画，部分镜头的灯光与渲染。</p>
<h3 id="Background"><a href="#Background" class="headerlink" title="Background:"></a>Background:</h3><p>该作品描述了一个邋遢男人，在家中遇见了“好邻居“蟑螂的故事。蟑螂与邋遢男人之间斗智斗勇，最终蟑螂团队获胜，并享用了家中美食的盛宴，故事充满了趣味性。该作品采用风格化的形式，将角色卡通化、拟人化、夸张化。</p>
<h3 id="Pipeline："><a href="#Pipeline：" class="headerlink" title="Pipeline："></a>Pipeline：</h3><p>3Dsmax, Maya, blender。</p>
<h3 id="Video"><a href="#Video" class="headerlink" title="Video:"></a>Video:</h3><h4 id="Full-video"><a href="#Full-video" class="headerlink" title="Full video :"></a>Full video :</h4><iframe src="//player.bilibili.com/player.html?aid=727152200&bvid=BV15S4y1B7JB&cid=735908449&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="900" height="450"></iframe>

<h3 id="Highres-Screenshot："><a href="#Highres-Screenshot：" class="headerlink" title="Highres Screenshot："></a>Highres Screenshot：</h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01rwohznfbcdomyi5hk91m3435.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Feast"></p>
<h3 id><a href="#" class="headerlink" title></a><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01giwgq5xdqslguxwutytw3939.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Feast"></h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01pjgri0ekbx4hzpusnoyu3133.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Feast"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01ufsz4cyuck9ypfkc6vzf3133.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Feast"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01vcsjevwy4lasp1y10y6w3334.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Feast"><img lazyload src="/images/loading.svg" data-src="https://cdna.artstation.com/p/assets/images/images/059/612/154/large/shuhang-luan-cb010db95b1ce1d947a248442c175de.jpg?1676766759" alt="Feast"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01ukhmloxvfflktj09dw0p3731.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Feast"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01gygpwrocrjfo3y6qonop3632.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Feast"></p>
<h3 id="Process-Screenshot"><a href="#Process-Screenshot" class="headerlink" title="Process Screenshot"></a>Process Screenshot</h3><h4 id="分工部分截图："><a href="#分工部分截图：" class="headerlink" title="分工部分截图："></a>分工部分截图：</h4><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/014xkbjdym4rchtk2t52kb3233.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Feast" style="zoom: 50%;"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/018fsa0o8yuhhwarkqxewc3639.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Feast" style="zoom: 33%;"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/019anpgvnfbvgor4ypxmea3337.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Feast"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01djvc0fj6ma95r1rbe1cd3437.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Feast" style="zoom:67%;"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01hcho4qyqum2funwtjhe13232.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Feast" style="zoom:50%;"></p>
<img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01hy4d42gwlikc5wviugp43835.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Feast" style="zoom:70%;">
]]></content>
      <categories>
        <category>作品集</category>
        <category>美术向</category>
        <category>卡通动画</category>
      </categories>
      <tags>
        <tag>个人作品</tag>
        <tag>3D动画</tag>
        <tag>卡通</tag>
        <tag>团队作品</tag>
      </tags>
  </entry>
  <entry>
    <title>作品：《用Python创建罗马文字图形》</title>
    <url>/2022/11/18/Practice-plane-composition/</url>
    <content><![CDATA[<h2 id="Completed-Image："><a href="#Completed-Image：" class="headerlink" title="Completed Image："></a>Completed Image：</h2><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01hsz4yanmu2luhoiqhihu3231.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="程序图集合"></p>
<h2 id="Introduction："><a href="#Introduction：" class="headerlink" title="Introduction："></a>Introduction：</h2><p>在我练习Python的时候，我观察了罗马字体，发现如果将把它放在平面构成里，它看起来也非常漂亮。</p>
<h2 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h2><p>大致模仿了罗马文字圆形形式，比例非常好。</p>
<img lazyload src="/images/loading.svg" data-src="/2022/11/18/Practice-plane-composition/1676782386825.jpg" class title="This is an roman image">



<h2 id="Design-thinking"><a href="#Design-thinking" class="headerlink" title="Design thinking:"></a>Design thinking:</h2><h3 id="图形函数制作"><a href="#图形函数制作" class="headerlink" title="图形函数制作"></a>图形函数制作</h3><ul>
<li>首先以turtle库为基本库绘制图像：</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br></pre></td></tr></table></figure></div>

<ul>
<li>再创建函数并定义函数变量，以创建 “m” 为例</li>
<li>并创建镜像：</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">m_word</span>(<span class="params">t,x_pos,y_pos,scale</span>):</span><br><span class="line"></span><br><span class="line">    t.setheading(<span class="number">0</span>)</span><br><span class="line">    scale = <span class="number">0.6</span> * scale</span><br><span class="line">    <span class="keyword">for</span> mirror <span class="keyword">in</span> [<span class="number">1</span>,-<span class="number">1</span>]:</span><br><span class="line">        <span class="comment"># basic</span></span><br><span class="line">        t.pu()</span><br><span class="line">        t.goto(x_pos+<span class="number">20</span>,y_pos-<span class="number">10</span>)</span><br><span class="line">        t.pd()</span><br><span class="line">        t.pencolor(<span class="string">&quot;#580000&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>然后通过判定，进行各种绘画</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#draw</span></span><br><span class="line"><span class="keyword">if</span> mirror:</span><br><span class="line">    t.lt(<span class="number">90</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    t.lt(<span class="number">90</span>+<span class="number">180</span>*mirror)</span><br><span class="line">t.fillcolor(<span class="string">&quot;#580000&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(<span class="number">100</span>*scale,<span class="number">270</span>*mirror)</span><br><span class="line">t.circle(<span class="number">200</span> *scale,-<span class="number">90</span>*mirror)</span><br><span class="line">t.circle(<span class="number">180</span> *scale,-<span class="number">90</span>*mirror)</span><br><span class="line">t.circle(<span class="number">130</span> *scale,-<span class="number">70</span>*mirror)</span><br><span class="line">t.seth(-<span class="number">90</span>*mirror)</span><br><span class="line">t.fd(<span class="number">200</span>*scale*mirror)</span><br><span class="line">t.end_fill()</span><br><span class="line"></span><br><span class="line"> t.up()</span><br><span class="line"> t.fd(<span class="number">20</span>*scale*mirror)</span><br><span class="line"> <span class="keyword">if</span> mirror:</span><br><span class="line">	 t.rt(<span class="number">90</span>)</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">	 t.rt(<span class="number">90</span> + <span class="number">180</span> * mirror)</span><br><span class="line"></span><br><span class="line"> t.fd(<span class="number">95</span>*scale)</span><br><span class="line"> t.pd()</span><br><span class="line"></span><br><span class="line">t.fillcolor(<span class="string">&quot;#580000&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(<span class="number">40</span>*scale*mirror)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.up()</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>其他图类似 … 共完成5个函数引用文件</p>
</li>
<li><p>效果图如下：</p>
</li>
</ul>
<img lazyload src="/images/loading.svg" data-src="/2022/11/18/Practice-plane-composition/0221593ffb0ea73e6b067288c10ca75.png" class title="This is an roman image">

<h3 id="制作Main程序："><a href="#制作Main程序：" class="headerlink" title="制作Main程序："></a>制作Main程序：</h3><ul>
<li>建立Constants,并导入五个图形函数文件：</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">t = turtle</span><br><span class="line"></span><br><span class="line">t.hideturtle()</span><br><span class="line">turtle.bgcolor(<span class="string">&quot;#FF6021&quot;</span>)</span><br><span class="line">t.speed(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">import</span> pattern_t</span><br><span class="line"><span class="keyword">import</span> pattern_l</span><br><span class="line"><span class="keyword">import</span> pattern_m</span><br><span class="line"><span class="keyword">import</span> pattern_p</span><br><span class="line"><span class="keyword">import</span> pattern_s</span><br></pre></td></tr></table></figure></div>

<ul>
<li>定义quilt函数，并创建函数变量：</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quilt</span>(<span class="params">scale, col, row, width,height,border, t</span>):</span><br><span class="line">    width = width</span><br><span class="line">    height = height</span><br><span class="line">    t.setup(width, height)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>将每一个小图形的 “轴心&#x2F;起点” 调到左下角：</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">startx = -width * <span class="number">.5</span> +border</span><br><span class="line">starty = -height * <span class="number">.5</span> +border</span><br></pre></td></tr></table></figure></div>

<ul>
<li>重点！！通过for循环，创建横向与纵向的复制，并创建”row”与”col”的变量来控制图像的数量</li>
<li>并通过num &#x3D; (i + j) %5 公式，让 0，1，2，3，4 依次横竖排列</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, row):</span><br><span class="line">    curr_y = starty + i * width/<span class="number">5.</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, col):</span><br><span class="line">        curr_x = startx + j * height/<span class="number">5.</span></span><br><span class="line">        t.pu()</span><br><span class="line">        t.setpos(curr_x, curr_y)</span><br><span class="line">        t.pd()</span><br><span class="line">        num = (i + j) % <span class="number">5</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>最后通过if判定，替换为图形函数：</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>):</span><br><span class="line">	 pattern_t.t_word(t, curr_x, curr_y,scale)</span><br><span class="line"> <span class="keyword">if</span> (num == <span class="number">1</span>):</span><br><span class="line">	 pattern_p.p_word(t, curr_x, curr_y,scale)</span><br><span class="line"> <span class="keyword">if</span> (num == <span class="number">2</span>):</span><br><span class="line"> 	pattern_l.l_word(t, curr_x, curr_y,scale)</span><br><span class="line"> <span class="keyword">if</span> (num == <span class="number">3</span>):</span><br><span class="line">	 pattern_s.s_word(t, curr_x, curr_y,scale)</span><br><span class="line"> <span class="keyword">if</span> (num == <span class="number">4</span>):</span><br><span class="line">  pattern_m.m_word(t, curr_x, curr_y,scale)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>搞定！</li>
</ul>
<h2 id="另附杂七杂八临摹练习图："><a href="#另附杂七杂八临摹练习图：" class="headerlink" title="另附杂七杂八临摹练习图："></a>另附杂七杂八临摹练习图：</h2><img lazyload src="/images/loading.svg" data-src="/2022/11/18/Practice-plane-composition/%E5%9B%BE%E7%89%872.png" class title="This is an roman image">















]]></content>
      <categories>
        <category>作品集</category>
        <category>程序向</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>个人作品</tag>
        <tag>Python</tag>
        <tag>程序向</tag>
      </tags>
  </entry>
  <entry>
    <title>作品：《用Python创建飓风模拟器》</title>
    <url>/2022/12/20/HurricaneStarter/</url>
    <content><![CDATA[<h2 id="Completed-Image："><a href="#Completed-Image：" class="headerlink" title="Completed Image："></a>Completed Image：</h2><img lazyload src="/images/loading.svg" data-src="/2022/12/20/HurricaneStarter/code01.gif" class title="This is an hurricane image">

<img lazyload src="/images/loading.svg" data-src="/2022/12/20/HurricaneStarter/code02.gif" class title="This is an hurricane image">



<h2 id="Introduction："><a href="#Introduction：" class="headerlink" title="Introduction："></a>Introduction：</h2><p>《飓风模拟器》，Python代码项目，参考选自Nifty Assignments 2018 -斯坦福计算机科学SIGCSE。</p>
<p><strong>玩法：</strong>提供五个时期的飓风路线模拟动画，用户可通过选择，来播放某一时期的飓风动态，并展示其速度、路线、等级等信息。</p>
<h2 id="Design-thinking"><a href="#Design-thinking" class="headerlink" title="Design thinking:"></a>Design thinking:</h2><h3 id="背景与启动函数制作"><a href="#背景与启动函数制作" class="headerlink" title="背景与启动函数制作"></a>背景与启动函数制作</h3><ul>
<li>首先以turtle库为基本库绘制图像：</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle </span><br></pre></td></tr></table></figure></div>

<ul>
<li>创建启动函数，包括创建一个turtle对象和一个屏幕对象，设置坐标系统以匹配经纬度，并显示地图的背景图像。</li>
<li>该函数返回一个元组，其中包含turtle对象、屏幕对象和地图背景图像。</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hurricane_setup</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">import</span> tkinter</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set size of window to size of map</span></span><br><span class="line">    turtle.setup(<span class="number">965</span>, <span class="number">600</span>)</span><br><span class="line"></span><br><span class="line">    wn = turtle.Screen()</span><br><span class="line">    wn.title(<span class="string">&quot;Hurricane Tracker&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># kludge to get the map shown as a background image,</span></span><br><span class="line">    <span class="comment"># since wn.bgpic does not allow you to position the image</span></span><br><span class="line">    canvas = wn.getcanvas()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set the coordinate system to match lat/long</span></span><br><span class="line">    <span class="comment"># DRF - parameters are llx lly urx ury (lower left and upper right)</span></span><br><span class="line">    turtle.setworldcoordinates(-<span class="number">90</span>, <span class="number">0</span>, -<span class="number">17.66</span>, <span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># DRF - Windows only supports gif, pgm, ppm unless you use the PIL library</span></span><br><span class="line">    map_bg_img = tkinter.PhotoImage(file=<span class="string">&quot;images/atlantic-basin.gif&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># additional kludge for positioning the background image</span></span><br><span class="line">    <span class="comment"># when setworldcoordinates is used</span></span><br><span class="line">    canvas.create_image(-<span class="number">1175</span>, -<span class="number">580</span>, anchor=tkinter.NW, image=map_bg_img)</span><br><span class="line"></span><br><span class="line">    t = turtle.Turtle()</span><br><span class="line">    wn.register_shape(<span class="string">&quot;images/hurricane.gif&quot;</span>)</span><br><span class="line">    t.shape(<span class="string">&quot;images/hurricane.gif&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (t, wn, map_bg_img)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>定义飓风函数，首先开启地图</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hurricane</span>():</span><br><span class="line">    (t, wn, map_bg_img) = hurricane_setup()</span><br></pre></td></tr></table></figure></div>



<h3 id="列表读取与设定"><a href="#列表读取与设定" class="headerlink" title="列表读取与设定"></a>列表读取与设定</h3><ul>
<li><p>定义了一个包含了五个数据文件的列表 files</p>
</li>
<li><p>然后，使用while 循环，让用户选择一个数据文件进行处理</p>
</li>
<li><p>当用户输入选择的文件编号后，代码将读取该文件中的数据并存储到一个名为 data 的列表中</p>
</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取数据文件</span></span><br><span class="line">files = [<span class="string">&#x27;newdata/florence2018.csv&#x27;</span>, <span class="string">&#x27;newdata/dorian2019.csv&#x27;</span>, <span class="string">&#x27;newdata/irma2017.csv&#x27;</span>, <span class="string">&#x27;newdata/jose2017.csv&#x27;</span>, <span class="string">&#x27;newdata/michael2018.csv&#x27;</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(files)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x + <span class="number">1</span>&#125;</span>) <span class="subst">&#123;files[x][<span class="number">8</span>:]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    file_number =<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Which file do you want to play? please enter a number(1 to 5):&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= file_number - <span class="number">1</span> &lt; <span class="built_in">len</span>(files):</span><br><span class="line">        data = []</span><br></pre></td></tr></table></figure></div>



<ul>
<li>使用“with open（file）as f：”语法，它可以自动关闭文件，从而避免了因为忘记关闭文件而导致的错误</li>
<li>使用 ”f.readlines()“ 函数将文件内容逐行读取到一个列表 f_csv 中</li>
<li>接着，使用一个 for 循环遍历 f_csv 中的每一行，并用 “enumerate()” 函数获取并定义行和高</li>
<li>最后跳过第一行（名称）</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">file = files[file_number-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Roger that...wait please&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file) <span class="keyword">as</span> f:</span><br><span class="line">    f_csv = f.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># set line and column</span></span><br><span class="line">    <span class="keyword">for</span> i, column <span class="keyword">in</span> <span class="built_in">enumerate</span>(f_csv):</span><br><span class="line">        <span class="comment"># use the enumerate function can get all the line number(enumerate = line number)</span></span><br><span class="line">        <span class="comment"># i = line number(the first variable)</span></span><br><span class="line">        <span class="comment"># skip headline:</span></span><br><span class="line">        column = column.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure></div>

<h3 id="建立函数内新列表"><a href="#建立函数内新列表" class="headerlink" title="建立函数内新列表"></a>建立函数内新列表</h3><ul>
<li>将需要用到的数据，进行整理，并合成一个新的列表</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set position,wind_speed,category:</span></span><br><span class="line"><span class="comment"># coordinates =(Lon, Lat)</span></span><br><span class="line">position = <span class="built_in">float</span>(column[<span class="number">3</span>]), <span class="built_in">float</span>(column[<span class="number">2</span>])</span><br><span class="line">category = column[-<span class="number">1</span>][:-<span class="number">1</span>]</span><br><span class="line">wind_speed = column[<span class="number">4</span>][:-<span class="number">3</span>]</span><br><span class="line"><span class="comment"># group a new data(csv)</span></span><br><span class="line">data.append([position, category, wind_speed])</span><br></pre></td></tr></table></figure></div>



<h3 id="设置绘图判定"><a href="#设置绘图判定" class="headerlink" title="设置绘图判定"></a>设置绘图判定</h3><ul>
<li>使用for循环进行判定，根据数据调节颜色、宽度、速度等</li>
<li></li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">                position = data[i][<span class="number">0</span>]</span><br><span class="line">                category = data[i][<span class="number">1</span>]</span><br><span class="line">                wind_speed = data[i][<span class="number">2</span>]</span><br><span class="line">                t.speed(<span class="number">10</span> - (<span class="built_in">float</span>(wind_speed) * (<span class="number">2</span> / <span class="number">37</span>)))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> category == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    t.color(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">                    t.pensize(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">elif</span> category == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    t.color(<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">                    t.pensize(<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">elif</span> category == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                    t.color(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">                    t.pensize(<span class="number">4</span>)</span><br><span class="line">                <span class="keyword">elif</span> category == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                    t.color(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">                    t.pensize(<span class="number">6</span>)</span><br><span class="line">                <span class="keyword">elif</span> category == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                    t.color(<span class="string">&#x27;orange&#x27;</span>)</span><br><span class="line">                    t.pensize(<span class="number">8</span>)</span><br><span class="line">                <span class="keyword">elif</span> category == <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                    t.color(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">                    t.pensize(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> category != <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    t.write(data[i][<span class="number">1</span>], font=(<span class="string">&quot;Arial&quot;</span>, <span class="number">10</span>, <span class="string">&quot;normal&quot;</span>))</span><br><span class="line">                t.goto(position)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                    t.pd()</span><br><span class="line">            t.pu()</span><br></pre></td></tr></table></figure></div>

<ul>
<li>通过判定，用户输入值在正确范围内的，进行绘制；输入0，为退出；输入其他错误，则会提示重新修改！</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">elif</span> -<span class="number">1</span> &gt; file_number-<span class="number">1</span> :</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Sorry,Invalid file number...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Please try again...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> file_number - <span class="number">1</span> &gt;= <span class="built_in">len</span>(files):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong! Wrong! Wrong!&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Try again!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> file_number == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bye~&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">	hurricane()</span><br><span class="line">	</span><br><span class="line">main()</span><br></pre></td></tr></table></figure></div>

<ul>
<li>完成！</li>
</ul>
<h4 id="输入值截图："><a href="#输入值截图：" class="headerlink" title="输入值截图："></a>输入值截图：</h4><img lazyload src="/images/loading.svg" data-src="/2022/12/20/HurricaneStarter/01.jpg" class title="This is an hurricane image"> 

<img lazyload src="/images/loading.svg" data-src="/2022/12/20/HurricaneStarter/02.jpg" class title="This is an hurricane image">









]]></content>
      <categories>
        <category>作品集</category>
        <category>程序向</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>个人作品</tag>
        <tag>Python</tag>
        <tag>程序向</tag>
        <tag>模拟</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>作品：《在Maya和UE5中制作批量重命名工具》</title>
    <url>/2023/02/01/rename-maya-tool/</url>
    <content><![CDATA[<h2 id="Completed-Image："><a href="#Completed-Image：" class="headerlink" title="Completed Image："></a>Completed Image：</h2><img lazyload src="/images/loading.svg" data-src="/2023/02/01/rename-maya-tool/tree01.gif" class title="This is an hurricane image">

<img lazyload src="/images/loading.svg" data-src="/2023/02/01/rename-maya-tool/rename-tool.jpg" class title="This is an hurricane image">




<h2 id="Introduction："><a href="#Introduction：" class="headerlink" title="Introduction："></a>Introduction：</h2><p>《Maya重命名工具》，是我在腾讯天美工作室，担任技术美术实习生时，最常见也最实用的一个工具，这也是我认为逻辑清晰，也非常容易制作的工具。特别是在辅助程序组进行批量创建模型，测试性能的时候，自己创建一个这样的工具，能够大大提高工作效率。</p>
<p>这里分享两个工具制作：</p>
<ol>
<li>UE5 Widget工具蓝图，应用于UE5引擎内的资源管理。可以快速使用内置的函数库，来通过节点连接的方式，制作出简单的重命名工具。</li>
<li>Python in Maya，应用于Maya软件内的资源管理，通过在maya中使用Python的Maya API 工具，来制作出简单有效的重命名工具。</li>
</ol>
<h5 id="UE5-Widget工具展示："><a href="#UE5-Widget工具展示：" class="headerlink" title="UE5-Widget工具展示："></a>UE5-Widget工具展示：</h5><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/018vd0oeinkvb5wvkfpgwn3932.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="程序图集合"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01t6vjyq6n3x7wtuaw34yl3638.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="程序图集合"></p>
<p>UE5 widget 工具不多赘述，逻辑原理与python同理。</p>
<h2 id="Design-Thinking"><a href="#Design-Thinking" class="headerlink" title="Design Thinking:"></a>Design Thinking:</h2><h3 id="建立窗口"><a href="#建立窗口" class="headerlink" title="建立窗口"></a>建立窗口</h3><ul>
<li>创建后缀字典：</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">SUFFIXES = &#123;</span><br><span class="line">    <span class="string">&quot;mesh&quot;</span>: <span class="string">&quot;GEO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;joint&quot;</span>: <span class="string">&quot;JNT&quot;</span>,</span><br><span class="line">    <span class="string">&quot;camera&quot;</span>: <span class="string">&quot;CAM&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ambientLight&quot;</span>: <span class="string">&quot;LGT&quot;</span>,</span><br><span class="line">    <span class="string">&quot;directionalLight&quot;</span>: <span class="string">&quot;LGT&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pointLight&quot;</span>: <span class="string">&quot;LGT&quot;</span>,</span><br><span class="line">    <span class="string">&quot;spotLight&quot;</span>: <span class="string">&quot;LGT&quot;</span>,</span><br></pre></td></tr></table></figure></div>

<ul>
<li>创建类，设定窗口名称</li>
<li>Tips：创建类的目的是把相关的代码封装在一起，并提供可重复使用的接口和工具，方便管理和维护代码。在这个例子中，RenamerUi 类的目的是创建 Maya 的批量重命名工具的用户界面。使用类可以把 UI 元素封装在一起，并在需要时方便地创建、显示、删除等。</li>
<li>在创建窗口前，先删去之前的同名窗口</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RenamerUi</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    WINDOW_NAME = <span class="string">&quot;BatchNamingUi&quot;</span></span><br><span class="line">    APP_NAME = <span class="string">&quot;Batch naming&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">cls</span>):</span><br><span class="line">        cls.delete()</span><br></pre></td></tr></table></figure></div>

<ul>
<li>建立窗口并命名</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立窗口</span></span><br><span class="line">    <span class="comment"># 主主控件</span></span><br><span class="line">    main_window = cmds.window(cls.WINDOW_NAME, title=<span class="string">&quot;Batch Renamer&quot;</span>, sizeable=<span class="literal">True</span>, menuBar=<span class="literal">True</span>)</span><br><span class="line">    main_layout = cmds.columnLayout(adjustableColumn=<span class="literal">True</span>, parent=main_window)</span><br><span class="line"></span><br><span class="line">   </span><br></pre></td></tr></table></figure></div>



<h3 id="UI界面"><a href="#UI界面" class="headerlink" title="UI界面"></a>UI界面</h3><h4 id="主控件"><a href="#主控件" class="headerlink" title="主控件"></a>主控件</h4><ul>
<li>设置界面内的主控件，并依附于窗口</li>
<li>创建UI：选择方法</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择界面</span></span><br><span class="line">method_layout = cmds.formLayout(parent=main_layout)</span><br><span class="line"></span><br><span class="line">cls.method = cmds.radioButtonGrp(numberOfRadioButtons=<span class="number">2</span>,</span><br><span class="line">                                 label=<span class="string">&quot;Method: &quot;</span>,</span><br><span class="line">                                 columnWidth=(<span class="number">1</span>, <span class="number">75</span>),</span><br><span class="line">                                 h=<span class="number">27</span>,</span><br><span class="line">                                 w=<span class="number">512</span>,</span><br><span class="line">                                 sl=<span class="number">1</span>,</span><br><span class="line">                                 labelArray2=(<span class="string">&quot;Selected&quot;</span>,<span class="string">&quot;Hierarchy&quot;</span>),</span><br><span class="line">                                 parent=method_layout)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h4 id="UI-重命名"><a href="#UI-重命名" class="headerlink" title="UI- 重命名"></a>UI- 重命名</h4><h5 id="子控件与输入窗口"><a href="#子控件与输入窗口" class="headerlink" title="子控件与输入窗口"></a>子控件与输入窗口</h5><ul>
<li><p>“Rename”窗口不需要输入值，因此使用<code>cmds.frameLayout()</code>命令创建栏目，并使用bgs&#x3D;True添加颜色</p>
</li>
<li><p>使用<code>cmds.textFieldGrp(）</code>命令创建帧布局窗口小部件，返回的值为字符串</p>
</li>
<li><p>使用<code>columnWidth1/2=</code>命令控制标签和帧布局窗口的宽度</p>
</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 名称窗口</span></span><br><span class="line">rename_layout = cmds.frameLayout(label=<span class="string">&quot;Rename&quot;</span>, parent=main_layout, bgs=<span class="literal">True</span></span><br><span class="line">rename_form_layout = cmds.formLayout(parent=rename_layout, h=<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#cw1:将name向右移动一段位置（增加空格）cw2:控制输入文本位置</span></span><br><span class="line">cls.name_tfg = cmds.textFieldGrp(label=<span class="string">&quot;Name: &quot;</span>,</span><br><span class="line">                                 columnWidth=(<span class="number">1</span>, <span class="number">75</span>),</span><br><span class="line">                                 columnWidth2=(<span class="number">2</span>, <span class="number">426</span>),</span><br><span class="line">                                 editable=<span class="literal">True</span>,</span><br><span class="line">                                 parent=rename_form_layout)</span><br><span class="line"></span><br><span class="line">cls.prefix_tfg = cmds.textFieldGrp(label=<span class="string">&quot;Prefix: &quot;</span>,</span><br><span class="line">                                   columnWidth=(<span class="number">1</span>, <span class="number">75</span>),</span><br><span class="line">                                   columnWidth2=(<span class="number">2</span>, <span class="number">426</span>),</span><br><span class="line">                                   editable=<span class="literal">True</span>,</span><br><span class="line">                                   parent=rename_form_layout)</span><br><span class="line"></span><br><span class="line">cls.suffix_tfg = cmds.textFieldGrp(label=<span class="string">&quot;Suffix: &quot;</span>,</span><br><span class="line">                                   columnWidth=(<span class="number">1</span>, <span class="number">40</span>),</span><br><span class="line">                                   columnWidth2=(<span class="number">2</span>, <span class="number">80</span>),</span><br><span class="line">                                   editable=<span class="literal">True</span>,</span><br><span class="line">                                   parent=rename_form_layout)</span><br><span class="line"></span><br><span class="line">cls.autoSuffix_cbg = cmds.checkBoxGrp(numberOfCheckBoxes=<span class="number">1</span>,</span><br><span class="line">                                      label=<span class="string">&quot;Auto Suffix: &quot;</span>,</span><br><span class="line">                                      columnWidth=(<span class="number">1</span>, <span class="number">70</span>),</span><br><span class="line">                                      io=<span class="literal">False</span>,</span><br><span class="line">                                      changeCommand=cls.toggleSuffixField,</span><br><span class="line">                                      parent=rename_form_layout)</span><br><span class="line"><span class="comment"># 设定后缀-数字位数</span></span><br><span class="line"><span class="comment"># 创建标签</span></span><br><span class="line">padding_label = cmds.text(<span class="string">&quot;Padding: &quot;</span>, align=<span class="string">&quot;right&quot;</span>, width=<span class="number">60</span>, parent=rename_form_layout)</span><br><span class="line">   </span><br></pre></td></tr></table></figure></div>

<ul>
<li>读取整数字段，控制后缀名的数值位数</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">cls.padding = cmds.intField(width=<span class="number">50</span>,</span><br><span class="line">                            value=<span class="number">1</span>,</span><br><span class="line">                            minValue=<span class="number">1</span>,</span><br><span class="line">                            maxValue=<span class="number">6</span>,</span><br><span class="line">                            step=<span class="number">1</span>,</span><br><span class="line">                            parent=rename_form_layout)</span><br></pre></td></tr></table></figure></div>



<h5 id="布局排版"><a href="#布局排版" class="headerlink" title="布局排版"></a>布局排版</h5><ul>
<li>使用<code>cmds.formLayout（）</code>命令，控制各控件进行排版</li>
<li>例如：<code>ac=(cls.autoSuffix_cbg, &quot;left&quot;, 0, cls.suffix_tfg)</code> 表示将 <code>autoSuffix_cbg</code> 这个控件的左侧对齐到 <code>suffix_tfg</code> 这个控件的右侧，并且二者之间没有空白区域</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">cmds.formLayout(rename_form_layout, e=<span class="literal">True</span>, af=(cls.name_tfg, <span class="string">&quot;top&quot;</span>, <span class="number">6</span>))</span><br><span class="line">   cmds.formLayout(rename_form_layout, e=<span class="literal">True</span>, af=(cls.name_tfg, <span class="string">&quot;left&quot;</span>, <span class="number">0</span>))</span><br><span class="line">   cmds.formLayout(rename_form_layout, e=<span class="literal">True</span>, ac=(cls.prefix_tfg, <span class="string">&quot;top&quot;</span>, <span class="number">3</span>, cls.name_tfg))</span><br><span class="line">   cmds.formLayout(rename_form_layout, e=<span class="literal">True</span>, ac=(cls.suffix_tfg, <span class="string">&quot;top&quot;</span>, <span class="number">3</span>, cls.name_tfg))</span><br><span class="line">   cmds.formLayout(rename_form_layout, e=<span class="literal">True</span>, ac=(cls.suffix_tfg, <span class="string">&quot;left&quot;</span>, <span class="number">0</span>, cls.prefix_tfg))</span><br><span class="line">   cmds.formLayout(rename_form_layout, e=<span class="literal">True</span>, ac=(cls.autoSuffix_cbg, <span class="string">&quot;top&quot;</span>, <span class="number">6</span>, cls.name_tfg))</span><br><span class="line">   cmds.formLayout(rename_form_layout, e=<span class="literal">True</span>, ac=(cls.autoSuffix_cbg, <span class="string">&quot;left&quot;</span>, <span class="number">0</span>, cls.suffix_tfg))</span><br><span class="line">   cmds.formLayout(rename_form_layout, e=<span class="literal">True</span>, ac=(padding_label, <span class="string">&quot;top&quot;</span>, <span class="number">6</span>, cls.name_tfg))</span><br><span class="line">   cmds.formLayout(rename_form_layout, e=<span class="literal">True</span>, ac=(padding_label, <span class="string">&quot;left&quot;</span>, <span class="number">0</span>, cls.autoSuffix_cbg))</span><br><span class="line">   cmds.formLayout(rename_form_layout, e=<span class="literal">True</span>, ac=(cls.padding, <span class="string">&quot;top&quot;</span>, <span class="number">3</span>, cls.name_tfg))</span><br><span class="line">   cmds.formLayout(rename_form_layout, e=<span class="literal">True</span>, ac=(cls.padding, <span class="string">&quot;left&quot;</span>, <span class="number">0</span>, padding_label))</span><br></pre></td></tr></table></figure></div>



<h4 id="UI-搜索和替换"><a href="#UI-搜索和替换" class="headerlink" title="UI- 搜索和替换"></a>UI- 搜索和替换</h4><ul>
<li>使用相同方法创建搜索和替换的UI界面，在此不多赘述…</li>
<li>最后加入<code>cmds.showWindow(main_window)</code>打开窗口</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Search and Replace UI</span></span><br><span class="line">replace_layout = cmds.frameLayout(label=<span class="string">&quot;Search and Replace&quot;</span>, parent=main_layout, bgs=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">replace_form_layout = cmds.formLayout(parent=replace_layout, h=<span class="number">65</span>)</span><br><span class="line"></span><br><span class="line">cls.searchFor_tfg = cmds.textFieldGrp(label=<span class="string">&quot;Search For: &quot;</span>,</span><br><span class="line">                                      columnWidth=(<span class="number">1</span>, <span class="number">75</span>),</span><br><span class="line">                                      columnWidth2=(<span class="number">2</span>, <span class="number">426</span>),</span><br><span class="line">                                      editable=<span class="literal">True</span>,</span><br><span class="line">                                      parent=replace_form_layout)</span><br><span class="line"></span><br><span class="line">cls.replaceWith_tfg = cmds.textFieldGrp(label=<span class="string">&quot;Replace With: &quot;</span>,</span><br><span class="line">                                        columnWidth=(<span class="number">1</span>, <span class="number">75</span>),</span><br><span class="line">                                        columnWidth2=(<span class="number">2</span>, <span class="number">426</span>),</span><br><span class="line">                                        editable=<span class="literal">True</span>,</span><br><span class="line">                                        parent=replace_form_layout)</span><br><span class="line"></span><br><span class="line">cmds.formLayout(replace_form_layout, e=<span class="literal">True</span>, af=(cls.searchFor_tfg, <span class="string">&quot;top&quot;</span>, <span class="number">6</span>))</span><br><span class="line">cmds.formLayout(replace_form_layout, e=<span class="literal">True</span>, af=(cls.searchFor_tfg, <span class="string">&quot;left&quot;</span>, <span class="number">0</span>))</span><br><span class="line">cmds.formLayout(replace_form_layout, e=<span class="literal">True</span>, ac=(cls.replaceWith_tfg, <span class="string">&quot;top&quot;</span>, <span class="number">3</span>, cls.searchFor_tfg))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Buttons UI</span></span><br><span class="line">button_layout = cmds.flowLayout(parent=main_layout)</span><br><span class="line">rename_btn = cmds.button(label=<span class="string">&quot;Rename&quot;</span>,</span><br><span class="line">                         width=<span class="number">170</span>,</span><br><span class="line">                         height=<span class="number">28</span>,</span><br><span class="line">                         command=<span class="string">&quot;batchRenamerUi.rename_objects()&quot;</span>,</span><br><span class="line">                         parent=button_layout)</span><br><span class="line"></span><br><span class="line">replace_btn = cmds.button(label=<span class="string">&quot;Replace&quot;</span>,</span><br><span class="line">                          width=<span class="number">170</span>,</span><br><span class="line">                          height=<span class="number">28</span>,</span><br><span class="line">                          command=<span class="string">&quot;batchRenamerUi.replace_objects()&quot;</span>,</span><br><span class="line">                          parent=button_layout)</span><br><span class="line"></span><br><span class="line">replace_btn = cmds.button(label=<span class="string">&quot;Cancel&quot;</span>,</span><br><span class="line">                          width=<span class="number">170</span>,</span><br><span class="line">                          height=<span class="number">28</span>,</span><br><span class="line">                          command=<span class="string">&quot;batchRenamerUi.delete()&quot;</span>,</span><br><span class="line">                          parent=button_layout)</span><br><span class="line"></span><br><span class="line">cmds.window(main_window, e=<span class="literal">True</span>, w=<span class="number">200</span>, h=<span class="number">150</span>)</span><br><span class="line">cmds.window(main_window, e=<span class="literal">True</span>, sizeable=<span class="literal">True</span>)</span><br><span class="line">cmds.window(main_window, e=<span class="literal">True</span>, rtf=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">cmds.showWindow(main_window)</span><br></pre></td></tr></table></figure></div>



<h3 id="重命名函数"><a href="#重命名函数" class="headerlink" title="重命名函数"></a>重命名函数</h3><h4 id="退出设定"><a href="#退出设定" class="headerlink" title="退出设定"></a>退出设定</h4><ul>
<li>如果关闭窗口，则退出UI界面</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="keyword">if</span> cmds.window(cls.WINDOW_NAME, exists=<span class="literal">True</span>):</span><br><span class="line">        cmds.deleteUI(cls.WINDOW_NAME, window=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="自动后缀设定"><a href="#自动后缀设定" class="headerlink" title="自动后缀设定"></a>自动后缀设定</h4><ul>
<li>如果自动后缀功能开启，则无法使用后缀重命名</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">@classmethod</span><br><span class="line">def toggleSuffixField(cls, value):</span><br><span class="line">    if value:</span><br><span class="line">        cmds.textFieldGrp(cls.suffix_tfg, e=1, en=0)</span><br><span class="line">    else:</span><br><span class="line">        cmds.textFieldGrp(cls.suffix_tfg, e=1, en=1)</span><br></pre></td></tr></table></figure></div>



<h4 id="重命名函数-1"><a href="#重命名函数-1" class="headerlink" title="重命名函数"></a>重命名函数</h4><h5 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h5><ul>
<li>获取UI中所有的值，并保存到相应变量</li>
<li>定义appending中的counter初始值为1，以作后用</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rename_objects</span>(<span class="params">cls</span>):</span><br><span class="line"></span><br><span class="line">    rename_data = cmds.textFieldGrp(cls.name_tfg, query=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">    prefix_data = cmds.textFieldGrp(cls.prefix_tfg, query=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">    padding_data = cmds.intField(cls.padding, query=<span class="literal">True</span>, value=<span class="literal">True</span>)</span><br><span class="line">    hierarchy_data = cmds.radioButtonGrp(cls.method, query=<span class="literal">True</span>, select=<span class="literal">True</span>)</span><br><span class="line">    counter = <span class="number">1</span></span><br></pre></td></tr></table></figure></div>



<h5 id="方法判定"><a href="#方法判定" class="headerlink" title="方法判定"></a>方法判定</h5><ul>
<li>判定选择方法，如果 hierarchy_data &#x3D; 2，则代表选择了第二个选项，代表选择了hierarchy</li>
<li>如果用户选择了hierarchy，则使用<code>cmds.listRelatives()</code>获取所有后代物体，并选中（很好用！）</li>
<li>若选择的是select，则只选择场景中选中的模型</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> hierarchy_data == <span class="number">2</span>:</span><br><span class="line">    sel = cmds.ls(sl=<span class="literal">True</span>, tr=<span class="literal">True</span>)</span><br><span class="line">    children = cmds.listRelatives(sel, ad=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="string">&#x27;transform&#x27;</span>)</span><br><span class="line">    cmds.select(children, add=<span class="literal">True</span>)</span><br><span class="line">    sel = cmds.ls(sl=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sel = cmds.ls(sl=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div>



<h5 id="获取后缀"><a href="#获取后缀" class="headerlink" title="获取后缀"></a>获取后缀</h5><ul>
<li>错误判定，若未选择模型，则提示报错</li>
<li>检查box里是否选择了自动后缀，若无，则获取用户输入的后缀信息</li>
<li>若有，则获取层级下的所有子对象的type，并对照字典一一赋予</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sel) &lt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Please select at least one object to rename&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> sel:</span><br><span class="line">        <span class="keyword">if</span> cmds.checkBoxGrp(cls.autoSuffix_cbg, query=<span class="literal">True</span>, value1=<span class="literal">True</span>):</span><br><span class="line">            objType = cmds.objectType(obj)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> objType == <span class="string">&quot;transform&quot;</span>:</span><br><span class="line">                children = cmds.listRelatives(obj, children=<span class="literal">True</span>, ni=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">                objType = cmds.objectType(children)</span><br><span class="line">            suffix_data = <span class="string">&quot;_&quot;</span> + SUFFIXES.get(objType, DEFAULT_SUFFIX)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            suffix_data = cmds.textFieldGrp(cls.suffix_tfg, query=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure></div>



<h5 id="重命名："><a href="#重命名：" class="headerlink" title="重命名："></a>重命名：</h5><ul>
<li><code>&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;&#123;3&#125;&quot;.format(prefix_data, rename_data, str(counter).zfill(padding_data), suffix_data</code>中的<code>&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;&#123;3&#125;&quot;.</code>表示将后方的4个数值合并为一个新的字符串</li>
<li>每复制一个物体，计数器增加1</li>
<li>最后清除选择</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">  			cmds.rename(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;&#123;3&#125;&quot;</span>.<span class="built_in">format</span>(prefix_data, rename_data, 			     						<span class="built_in">str</span>(counter).zfill(padding_data), suffix_data))</span><br><span class="line">       		counter+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出有多少模型被更改</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Renamed &#123;0&#125; Objects&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(sel)))</span><br><span class="line">cmds.select(cl=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div>



<h4 id="搜索与替换函数："><a href="#搜索与替换函数：" class="headerlink" title="搜索与替换函数："></a>搜索与替换函数：</h4><h5 id="获取值-1"><a href="#获取值-1" class="headerlink" title="获取值"></a>获取值</h5><ul>
<li>定义搜索与替换函数</li>
<li>获取搜索、替换和方法值</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replace_objects</span>(<span class="params">cls</span>):</span><br><span class="line"></span><br><span class="line">    searchFor_data = cmds.textFieldGrp(cls.searchFor_tfg, query=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">    replaceWith_data = cmds.textFieldGrp(cls.replaceWith_tfg, query=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">    hierarchy_data = cmds.radioButtonGrp(cls.method, query=<span class="literal">True</span>, select=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div>



<h5 id="判定与替换："><a href="#判定与替换：" class="headerlink" title="判定与替换："></a>判定与替换：</h5><ul>
<li>同上：获取所选模型，并保存到sel变量中（selection缩写）</li>
<li>使用str.replace命令，把新名称替换旧名称</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> hierarchy_data == <span class="number">2</span>:</span><br><span class="line">    sel = cmds.ls(sl=<span class="literal">True</span>, tr=<span class="literal">True</span>)</span><br><span class="line">    children = cmds.listRelatives(sel, ad=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="string">&#x27;transform&#x27;</span>)</span><br><span class="line">    cmds.select(children, add=<span class="literal">True</span>)</span><br><span class="line">    sel = cmds.ls(sl=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sel = cmds.ls(sl=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sel) &lt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Please select at least one object to replace&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> searchFor_data == <span class="string">&quot;&quot;</span>:</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Please enter a name to search for&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> replaceWith_data == <span class="string">&quot;&quot;</span>:</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Please enter a name to replace with&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sel:</span><br><span class="line">        <span class="keyword">if</span> searchFor_data <span class="keyword">in</span> i:</span><br><span class="line">            renamedString = i.replace(searchFor_data, replaceWith_data)</span><br><span class="line">            cmds.rename(i, renamedString)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>！！！重点：<code>replace</code> 是 Python 字符串方法，用于替换字符串中的子字符串。注意！这只是在 Python 中修改了字符串，它并不会实际更改场景中物体的名称。因此，要更改场景中的物体名称，还是需要使用 <code>cmds.rename(oldname,newname)</code> 命令（血的教训！！！）</li>
</ul>
]]></content>
      <categories>
        <category>作品集</category>
        <category>程序向</category>
        <category>Python</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>个人作品</tag>
        <tag>Python</tag>
        <tag>程序向</tag>
        <tag>工具</tag>
        <tag>重命名</tag>
      </tags>
  </entry>
  <entry>
    <title>作品：《Lost corner》-Shader</title>
    <url>/2023/02/19/Shader/</url>
    <content><![CDATA[<h3 id="Introduction："><a href="#Introduction：" class="headerlink" title="Introduction："></a>Introduction：</h3><p>《Lost Corner》，《遗失的角落》，个人独立动画项目作品，包括Maya模型制作，SD贴图烘焙与SP材质绘制。在一个月内完成了模型、UV、材质全流程（SD+SP)、UE5- Shader、场景和灯光的全流程制作，因此整体质量受到了影响，我会在接下来的空余时间，继续深入优化贴图的细节。</p>
<h3 id="Video"><a href="#Video" class="headerlink" title="Video:"></a>Video:</h3><iframe src="//player.bilibili.com/player.html?aid=993028622&bvid=BV18x4y1K7Gk&cid=1041212201&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="900" height="450"> </iframe>



<h3 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement:"></a>Achievement:</h3><p>重点训练了<strong>Substance Designer</strong>中的<strong>程序化贴图制作</strong>，并生成大量可控的变量，以供Substance Painter中进行绘制，并着重训练了SP进入UE5中后的<strong>材质优化</strong>工作。</p>
<p>大大增强了自己对于<strong>节点式和程序化</strong>的逻辑思维能力，与同时进行的python练习作品结合，加深了对程序化和工具化的理解，更加坚定了对于技术美术方向的研究目标。</p>
<h3 id="Pipeline："><a href="#Pipeline：" class="headerlink" title="Pipeline："></a>Pipeline：</h3><p>该作品主要由Maya、Substance Designer、Substance Painter、UE5完成。</p>
<h3 id="Highres-Screenshot："><a href="#Highres-Screenshot：" class="headerlink" title="Highres Screenshot："></a>Highres Screenshot：</h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01qpbn12wyhiwsvtxjvu3j3139.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《Lost corner》-Shader"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01ow0y73moi325xfispuai3735.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《Lost corner》-Shader"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/0149s8qttohfpicglchbja3837.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《Lost corner》-Shader"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01uzphsoalziu2ctylfvi13331.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《Lost corner》-Shader"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/012qy1mfhr7hinyootgete3338.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《Lost corner》-Shader"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01urcthcgo9scwww0kmlbt3839.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《Lost corner》-Shader">#### </p>
<h3 id="Process"><a href="#Process" class="headerlink" title="Process:"></a>Process:</h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01vvma9qscgd1uxhncmett3734.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《Lost corner》-Shader"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01e4xsw58fye1p3b3obecd3037.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《Lost corner》-Shader"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01vqapq8xbpbw78he12ffv3337.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《Lost corner》-Shader"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01nzv6jjcvxevdz7zh7vb33434.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《Lost corner》-Shader"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01lm7yl1xetxffjvwgwd6p3037.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《Lost corner》-Shader"></p>
<h3 id="Obsolete-Version"><a href="#Obsolete-Version" class="headerlink" title="Obsolete Version"></a>Obsolete Version</h3><ul>
<li><h5 id="废弃草稿："><a href="#废弃草稿：" class="headerlink" title="废弃草稿："></a>废弃草稿：</h5><iframe src="//player.bilibili.com/player.html?aid=695586912&bvid=BV1Z24y1t7Qa&cid=1041243111&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="900" height="450"> </iframe></li>
</ul>
]]></content>
      <categories>
        <category>作品集</category>
        <category>美术向</category>
        <category>CG动画</category>
      </categories>
      <tags>
        <tag>个人作品</tag>
        <tag>3D动画</tag>
        <tag>CG</tag>
        <tag>团队作品</tag>
        <tag>Shader</tag>
        <tag>Material</tag>
      </tags>
  </entry>
  <entry>
    <title>作品：《MoJee》-Game</title>
    <url>/2022/04/11/MoJee-game/</url>
    <content><![CDATA[<h3 id="Video"><a href="#Video" class="headerlink" title="Video:"></a>Video:</h3><iframe src="//player.bilibili.com/player.html?aid=568091304&bvid=BV1Bv4y1b7di&cid=1041222490&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="900" height="450"> </iframe>

<h3 id="Introduction："><a href="#Introduction：" class="headerlink" title="Introduction："></a>Introduction：</h3><p>《MoJee-Game》，全流程独立游戏。制作周期为两个月，课程比较紧张，因此续弦了本科毕业设计的MoJee IP，制作出一个游戏世界。</p>
<p>掌握了引擎内<strong>动画和角色状态机</strong>创建的基本原理，和游戏交互系统。打通了基本游戏制作流程和游戏内过场动画系统。</p>
<h3 id="Main-Designer："><a href="#Main-Designer：" class="headerlink" title="Main Designer："></a>Main Designer：</h3><ol>
<li>进行了<strong>模型材质</strong>的优化，并重定向游戏内骨骼配置。</li>
<li>完成了角色状态机的走跑跳，与连续攻击动作。</li>
<li>通过素材和特效制作，搭建两个较为完备的游戏关卡。</li>
<li>制作了大量的交互程序，包括关卡跳跃、人物攻击、怪物惊醒、追踪与死亡，血条和头像等UI界面、音效等等。</li>
</ol>
<h3 id="Pipeline："><a href="#Pipeline：" class="headerlink" title="Pipeline："></a>Pipeline：</h3><p>该作品主要由3dsmax、Maya、Substance Designer&#x2F;Painter、UE5完成。</p>
<h3 id="Game-Screenshot："><a href="#Game-Screenshot：" class="headerlink" title="Game Screenshot："></a>Game Screenshot：</h3><h3 id><a href="#" class="headerlink" title></a><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01yjd9l0cacfz26b7gvota3832.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Game"></h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01ofpxn7feocewh5jonv8z3338.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Game"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/013yl8oswvt2loubmv3mfd3732.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Game"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01cj3wg32yakhnpeheacff3538.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Game"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01ndbjio8oqj144z5v9mw23033.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Game"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01lev9tmdyqlj09svixell3734.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Game"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01n3a6loxbymhrnposmku83935.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《MoJee》-Game">                                      <img lazyload src="/images/loading.svg" data-src="/2022/04/11/MoJee-game/game01.jpg" class title="This is an hurricane image"></p>
<p>​                                  </p>
]]></content>
      <categories>
        <category>作品集</category>
        <category>美术向</category>
      </categories>
      <tags>
        <tag>个人作品</tag>
        <tag>卡通</tag>
        <tag>游戏</tag>
        <tag>3D</tag>
        <tag>UE4</tag>
      </tags>
  </entry>
  <entry>
    <title>Substance Designer 和 Substance Painter 材质和纹理制作流程 -- 经验笔记帖</title>
    <url>/2023/02/25/notes-on-SDtoSP/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><p>介绍 <strong>Substance Designer</strong> 和 <strong>Substance Painter</strong> 制作材质和纹理的基本概念和使用方法。</p>
</li>
<li><p>分享个人的使用经验和心得体会。</p>
</li>
<li><p>每天都会更新自己材质学习的经验和成果。</p>
</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>下载和安装 <strong>Substance Designer</strong> 和 <strong>Substance Painter</strong>。</li>
<li>学习 <strong>Substance Designer</strong> 和 <strong>Substance Painter</strong> 的基本节点、笔刷和工具。</li>
<li>使用 <strong>Substance Designer</strong> 和 <strong>Substance Painter</strong> 制作材质和纹理。分享自己的创作过程和结果。<ul>
<li>技巧和心得体会</li>
<li>节点、笔刷和工具的应用</li>
</ul>
</li>
<li>导入到 <strong>Unreal 引擎</strong>，并使用 <strong>Substance Designer</strong> 节点控制材料的外观和属性。分享自己的操作过程和注意事项。</li>
<li>调试和优化材质和纹理，以确保最佳的效果和性能。分享自己的实践经验和建议。<ul>
<li>性能和优化问题</li>
<li>如何做到最佳效果</li>
</ul>
</li>
</ol>
<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>在这里分享自己的经验和过程，使用列表、图片、代码等方式展示</p>
<h3 id="一、贴图格式"><a href="#一、贴图格式" class="headerlink" title="一、贴图格式"></a>一、贴图格式</h3><p>在使用<strong>Substance Designer</strong>制作完贴图并将其导入<strong>Substance Painter</strong>之前，通常需要准备以下几种不同的贴图格式：</p>
<ol>
<li><p><strong>Base Color（基础颜色）</strong>：这是<strong>Substance Painter</strong>中最重要的贴图之一，因为它用于定义材质的主要颜色信息。在<strong>Substance Designer</strong>中，你可以使用任何支持的文件格式（例如PNG，TGA，JPEG等）导出Base Color贴图。</p>
<p>​		注：<strong>Diffuse（漫反射）</strong>贴图通常用于传统的渲染管线中，在这种管线中，它用于定义材质表面的主要颜		色。在现代的基于物理的渲染（PBR）工作流程中，Diffuse贴图的作用<u><strong>已被Base Color所取代</strong></u>，因为		Base Color 更能准确地描述材质表面在不同光照条件下的颜色。</p>
</li>
<li><p><strong>Normal Map（法线贴图）</strong>：这种贴图通常用于增强模型表面的细节和凹凸感。在<strong>Substance Designer</strong>中，你可以使用标准的RGB格式导出Normal Map贴图。</p>
</li>
<li><p><strong>Ambient Occlusion（环境遮挡）</strong>：这种贴图通常用于定义模型表面的阴影和反射。在<strong>Substance Designer</strong>中，您可以使用标准的RGB格式导出Ambient Occlusion贴图。</p>
</li>
<li><p><strong>Roughness（粗糙度）</strong>：这种贴图通常用于定义材质表面的粗糙程度。在<strong>Substance Designer</strong>中，你可以使用标准的灰度图像格式（例如PNG，TGA，JPEG等）导出Roughness贴图。</p>
</li>
<li><p><strong>Metalness（金属度）</strong>：这种贴图通常用于定义材质的金属或非金属特性。在<strong>Substance Designer</strong>中，你可以使用标准的灰度图像格式（例如PNG，TGA，JPEG等）导出Metalness贴图。</p>
</li>
<li><p><strong>Height Map（高度图）</strong>：高度图是一种灰度图像，其中黑色表示表面高度最低，白色表示表面高度最高。在Substance Designer中，高度图通常用于为模型表面创建细节，例如凹凸感和纹理细节。在<strong>Substance Painter</strong>中，高度图通常用于创建表面细节，例如石头，裂纹和其他具有深度感的材质。</p>
</li>
<li><p><strong>Opacity Map（透明度贴图）</strong>：透明度贴图是一种用于控制模型表面透明度的图像。在<strong>Substance Designer</strong>中，透明度贴图通常用于创建透明材质，例如玻璃和水。在<strong>Substance Painter</strong>中，透明度贴图通常用于创建半透明和透明的材质，例如草，树叶和其他具有透明部分的材质。</p>
</li>
</ol>
<p>因此，在使用<strong>Substance Designer</strong>制作完贴图并将其导入<strong>Substance Painter</strong>之前，导出的<u><strong>标准贴图数量</strong>为 <strong>7</strong></u>。</p>
<h3 id="二、节点功能"><a href="#二、节点功能" class="headerlink" title="二、节点功能"></a>二、节点功能</h3><ul>
<li><h4 id="cube-3D"><a href="#cube-3D" class="headerlink" title="cube 3D"></a>cube 3D</h4></li>
</ul>
<p>Cube3D节点是Substance Designer中的一个节点，它可以用于创建3D物体形状，例如箱子、建筑、道具、雕塑、产品等等。使用Cube3D节点，用户可以快速方便地创建各种形状，并通过其他节点进一步调整其材质和纹理。因此，Cube3D节点是Substance Designer中一个非常实用的工具，可以用于各种应用场景，为用户提供了快速方便的形状和结构设计方案。</p>
<ul>
<li><h4 id="Edge-Detect"><a href="#Edge-Detect" class="headerlink" title="Edge Detect"></a>Edge Detect</h4></li>
</ul>
<p>Edge Detect节点是一种可以用于检测输入图像中边缘的节点 , 通常用于描边与高光。</p>
<h4 id="Grayscale-conversion（灰度转换）"><a href="#Grayscale-conversion（灰度转换）" class="headerlink" title="Grayscale conversion（灰度转换）"></a>Grayscale conversion（灰度转换）</h4><p>将彩色图像转换为灰度图像的过程, 将彩色图像转换为灰度图像可以使图像更容易分析和处理，同时减少了数据存储和传输的负担。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><strong>Substance Designer</strong> 和 <strong>Substance Painter</strong> 是 3D 制作中非常强大和流行的工具，它们提供了快速、高效、灵活的材质和纹理制作方案，可以让 3D 艺术家和游戏开发人员更快地创建高质量的模型和场景。使用这些工具制作材质和纹理需要掌握各种节点、笔刷和工具的应用，并注意材质和纹理的性能和优化问题，以确保在游戏中使用时能够获得最佳的效果和性能。</p>
]]></content>
      <categories>
        <category>经验笔记</category>
        <category>美术向</category>
        <category>材质</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Substance Designer</tag>
        <tag>Substance Painter</tag>
        <tag>经验笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>作品：作品集 — PDF</title>
    <url>/2023/03/03/MyPortfolio/</url>
    <content><![CDATA[<h2 id="以下为本科至研一期间作品："><a href="#以下为本科至研一期间作品：" class="headerlink" title="以下为本科至研一期间作品："></a>以下为本科至研一期间作品：</h2><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01sr87oyrfg31mgy2nutmg3732.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/011aizpinrbokn7ywpmjse3337.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/012a9i5fdte6at64tpcv5f3331.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01w2hf6vxyrpldkb4vfggl3333.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01vxmj5vyquuj2f4ddv1c63935.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01775wmuyjgku8we8oexun3836.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01tddcnwaidlhsaae60ewh3535.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01ptgmry3xzt57uwhdgksw3134.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/011mhc0c2cq03rqzfrvb1u3034.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01uqfnn9gqhhd1cfdnwltb3734.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/019xprsvaeduy59ax9yeem3237.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/0174vp84t39xcaqg09jvab3433.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01q8cx6quwfzsqnkse03vh3930.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/018bmosvyxtytm5rv6rcwt3336.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/011ewaobwhey4b3qnwq4ar3830.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01qqsk643togcsiels3q2k3632.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="美术作品集"></p>
<h4 id="注：后期的作品，暂时以博客文章形式上传"><a href="#注：后期的作品，暂时以博客文章形式上传" class="headerlink" title="注：后期的作品，暂时以博客文章形式上传"></a>注：后期的作品，暂时以博客文章形式上传</h4><h4 id="以下为作品集合集链接："><a href="#以下为作品集合集链接：" class="headerlink" title="以下为作品集合集链接："></a>以下为作品集合集链接：</h4><a class="button  center large" href="https://archieluan.github.io/categories/%E4%BD%9C%E5%93%81%E9%9B%86" title="作品集合集 点击进入"><i class="fa-solid fa-bars"></i> 作品集合集 点击进入</a>

<a class="button  center regular" href="https://archieluan.github.io/categories/%E4%BD%9C%E5%93%81%E9%9B%86/%E7%BE%8E%E6%9C%AF%E5%90%91/" title="美术向 点击进入"><i class="fa-solid fa-bars"></i> 美术向 点击进入</a>

<a class="button  center regular" href="https://archieluan.github.io/categories/%E4%BD%9C%E5%93%81%E9%9B%86/%E7%A8%8B%E5%BA%8F%E5%90%91/" title="工具向 点击进入"><i class="fa-solid fa-bars"></i> 工具向 点击进入</a>





]]></content>
      <categories>
        <category>作品集</category>
        <category>作品集-PDF文件</category>
      </categories>
      <tags>
        <tag>卡通</tag>
        <tag>游戏</tag>
        <tag>3D</tag>
        <tag>个人作品集</tag>
      </tags>
  </entry>
  <entry>
    <title>文档：《从农场到游戏：实现有机食品虚拟场景中的模块化材质技术》</title>
    <url>/2023/03/13/workflow-for-organic-food/</url>
    <content><![CDATA[<h2 id="从农场到游戏：实现有机食品虚拟场景中的模块化材质技术"><a href="#从农场到游戏：实现有机食品虚拟场景中的模块化材质技术" class="headerlink" title="从农场到游戏：实现有机食品虚拟场景中的模块化材质技术"></a>从农场到游戏：实现有机食品虚拟场景中的模块化材质技术</h2><h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><h3 id="1-研究背景和目的"><a href="#1-研究背景和目的" class="headerlink" title="1. 研究背景和目的"></a>1. 研究背景和目的</h3><p>在游戏开发过程中，场景的设计和制作一直是一个重要的环节。其逼真度和细节程度直接影响游戏质量和玩家体验。随着技术不断发展，游戏场景制作和渲染也在不断创新和进步。模块化材质技术是一种重要手段，可以将场景中的元素或对象分解成多个小模块进行制作和组合。每个小模块都可以单独制作和修改，从而提高制作效率和减少工作量。</p>
<p>在游戏场景制作中，有机食物场景是一个重要类别，包括各种蔬菜、水果、肉类等食物和食品场景。在有机食物场景制作中，除了需考虑食物本身特点和形态，还需注意材质制作和渲染。</p>
<h3 id="2-研究方法与框架"><a href="#2-研究方法与框架" class="headerlink" title="2. 研究方法与框架"></a>2. 研究方法与框架</h3><p>本文旨在探讨模块化材质技术在有机食物场景制作和渲染中的应用。通过介绍有机食物场景的概念、特点和设计要求，详细讲解如何使用模块化材质技术创建有机食物场景中的材质和灯光效果。这包括使用Maya进行模型制作和UV展开，使用Substance Designer进行材质制作，以及使用Substance Painter进行纹理绘制和调整。</p>
<p>在此基础上，通过具体案例分析，展示如何使用模块化材质技术制作逼真的有机食物场景。接着，探讨有机食物场景渲染时需考虑的因素和注意事项，以及模块化材质技术在有机食物场景渲染中的应用案例。最后，详细介绍使用Substance Suite进行有机食物材质制作和使用UE5进行有机食物场景搭建、动画与渲染的应用实践，并展示有机食物场景的展示效果。</p>
<h2 id="二、-完成品展示"><a href="#二、-完成品展示" class="headerlink" title="二、 完成品展示"></a>二、 完成品展示</h2><h3 id="1-最终视频"><a href="#1-最终视频" class="headerlink" title="1. 最终视频"></a>1. 最终视频</h3><iframe width="608" height="304" src="https://www.youtube.com/embed/u7jM_NXORmk" title="Aesthetic of Decay" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>width="900" height="450"></iframe>

<h3 id="2-最终截图"><a href="#2-最终截图" class="headerlink" title="2. 最终截图"></a>2. 最终截图</h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01pgm0te6scea7mcpdeeed3036.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<h2 id="三、模块化材质技术的应用"><a href="#三、模块化材质技术的应用" class="headerlink" title="三、模块化材质技术的应用"></a>三、模块化材质技术的应用</h2><h3 id="1-模型准备-Maya"><a href="#1-模型准备-Maya" class="headerlink" title="1. 模型准备(Maya)"></a>1. 模型准备(Maya)</h3><ul>
<li><h4 id="模型创作："><a href="#模型创作：" class="headerlink" title="模型创作："></a>模型创作：</h4></li>
</ul>
<p>首先根据设计需求和场景要求，在Maya中进行模型创作。这包括各种有机食物元素的建模，如蔬菜、水果、肉类等。使用Maya中的多边形建模工具，根据实际需求和设计要求进行建模。在建模过程中，特别注意模型细节和形态，确保最终模型满足实际要求和场景需求。</p>
<ul>
<li><h4 id="UV展开："><a href="#UV展开：" class="headerlink" title="UV展开："></a>UV展开：</h4><p>完成模型创作后，需对模型进行UV展开。UV展开是将3D模型表面展开成2D图像的过程，为进行材质贴图和纹理绘制的前提条件。在展开UV过程中，使用Maya中的UV编辑工具，对每个模型进行UV排布和调整。排布UV过程中，特别注意模型连续性和可重复性，确保最终UV贴图满足实际要求和场景需求。同时，使用Maya中的UV布局工具和自动展开工具，提高UV排布效率和准确性。</p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01jcgrgxiv9lktpu9dwc1w3331.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
</li>
</ul>
<p>​				</p>
<h3 id="2-模块化材质技术"><a href="#2-模块化材质技术" class="headerlink" title="2. 模块化材质技术"></a>2. 模块化材质技术</h3><p>在有机食物场景制作中，纹理贴图是关键环节。为创建逼真有机材质，采用Substance Designer和Substance Painter两个专业纹理制作软件。通过使用它们，可以有效提高纹理贴图制作效率和质量。</p>
<ul>
<li><h4 id="材质纹理分析"><a href="#材质纹理分析" class="headerlink" title="材质纹理分析"></a>材质纹理分析</h4><p>以芒果为例，有机食物材质具有复杂的颜色和纹理细节。以下是对此材质的分析以及如何在Substance Designer中使用节点绘制来创建此材质：</p>
<ul>
<li><h5 id="颜色变化和分布"><a href="#颜色变化和分布" class="headerlink" title="颜色变化和分布"></a>颜色变化和分布</h5><p>芒果的颜色变化和分布非常丰富，通常呈现出黄色、橙色、红色等多种颜色的混合效果。同时，芒果表面的颜色还具有颗粒状的分布，这些颗粒状的颜色通常呈现出深色或浅色的点状分布。</p>
<p>在Substance Designer中，可以使用多种节点来创建这种复杂的颜色变化和分布效果，如Gradient Map、Gradient Radial等。可以根据实际情况来选择不同的节点和参数，以达到理想的颜色效果。同时，也可以使用Mask节点来实现颗粒状的颜色分布效果，使用Noise节点来创建细小的噪点细节效果。</p>
</li>
<li><h5 id="纹理和颗粒细节"><a href="#纹理和颗粒细节" class="headerlink" title="纹理和颗粒细节"></a>纹理和颗粒细节</h5><p>芒果的表面具有非常丰富的纹理和颗粒细节，这些细节通常呈现出深浅不一、大小不同、形状复杂等特点。其中，芒果表面的纹理和颗粒通常集中在果实的凹凸处，如果核周围等位置。</p>
<p>在Substance Designer中，可以使用多种节点来创建这种复杂的纹理和颗粒细节效果，如Noise、Height to Normal等。可以根据实际情况来选择不同的节点和参数，以达到理想的效果。同时，也可以使用Mask节点来控制纹理和颗粒的分布位置和大小，以达到更加真实的效果。</p>
<p>总之，芒果这种有机食物材质具有非常复杂的颜色和纹理细节，通过在Substance Designer中使用节点绘制，可以轻松地创建逼真的芒果材质。需要注意的是，不同的芒果品种和质量会呈现出不同的颜色和纹理特征，因此在实际制作中，需要根据实际情况来进行调整和优化。</p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01pg2bowu8sjz6dmnieuaw3138.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
</li>
<li><h5 id="其他食物分析"><a href="#其他食物分析" class="headerlink" title="其他食物分析"></a>其他食物分析</h5><ul>
<li><p><strong>肉类</strong></p>
<ul>
<li><p>纹理：烤肉表面有筋膜、纤维纹理和油脂分布。</p>
</li>
<li><p>颜色：肉的颜色从红褐色到深褐色不等。</p>
</li>
<li><p>斑点：烤肉表面有些许黑色的斑点。</p>
<img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01nscynuybk5dkf9ewsjkd3539.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img" style="zoom:50%;"></li>
</ul>
</li>
<li><p><strong>荷包蛋</strong></p>
<ul>
<li><p>纹理：荷包蛋表面有蛋白质凝固形成的凹凸纹理，蛋黄表面有微小的颗粒纹理。</p>
</li>
<li><p>颜色：蛋白质呈淡黄色，蛋黄中心呈深黄色。</p>
</li>
<li><p>斑点：荷包蛋表面有少量烹饪过程中产生的焦痕。</p>
</li>
<li><p>渐变：蛋黄颜色从中心向外逐渐变浅。</p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01wqioftwezqqwwx5ssugk3831.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></p>
</li>
</ul>
</li>
<li><p><strong>香梨</strong></p>
<ul>
<li><p>纹理：香梨表面有细微的果皮纹理。</p>
</li>
<li><p>颜色：香梨的颜色从绿色到黄色不等，反映了果实的成熟程度。</p>
</li>
<li><p>斑点：香梨表面有些许斑点和疤痕。</p>
</li>
<li><p>渐变：香梨颜色在果实顶部逐渐变深。</p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/014nopoykqaswscjel0cob3738.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
</li>
</ul>
</li>
<li><p><strong>芝士蛋糕</strong></p>
<ul>
<li>颜色：芝士蛋糕的主要颜色为黄色。</li>
<li>斑点：蛋糕表面有因二氧化碳气体排出导致的空洞。</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01k41se8fikcjbwjeetttr3331.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="模块化材质创建-Substance-Designer"><a href="#模块化材质创建-Substance-Designer" class="headerlink" title="模块化材质创建(Substance Designer)"></a>模块化材质创建(Substance Designer)</h4><p>模块化材质技术可以将复杂的材质分解成多个小模块进行制作和组合，每个小模块都可以单独制作和修改，从而提高制作效率和减少工作量。Substance Designer作为一款专业的材质创作软件，可以轻松地创建各种复杂的模块化材质。</p>
<ul>
<li><h5 id="创建基础材质"><a href="#创建基础材质" class="headerlink" title="创建基础材质"></a>创建基础材质</h5><p>首先，我们需要创建一个基础材质。在Substance Designer中，可以使用基础节点（如Gradient Map、Checker、Turbulence等）创建基础材质，然后添加颜色、光泽度等属性。这些基础节点可以与其他节点进行组合，创建出各种不同的材质。</p>
</li>
<li><h5 id="制作材质模块"><a href="#制作材质模块" class="headerlink" title="制作材质模块"></a>制作材质模块</h5><p>接着，我们可以使用各种节点和工具来制作材质模块。Substance Designer提供了丰富的节点和工具，如Noise、Tile Sampler、Pattern Generator等，可以轻松地创建各种材质细节，如纹理、凹凸、颗粒等。在制作模块时，可以根据实际情况选择不同的节点和工具，以达到理想的效果。</p>
</li>
<li><h5 id="组合材质模块"><a href="#组合材质模块" class="headerlink" title="组合材质模块"></a>组合材质模块</h5><p>在制作完各种材质模块后，我们需要将它们组合起来，创建出一个完整的模块化材质。在Substance Designer中，可以使用Blend、Transform等节点进行组合，也可以使用Functions、Switch等节点进行控制，以实现各种不同的组合效果。</p>
</li>
<li><h5 id="以芒果为例的流程制作"><a href="#以芒果为例的流程制作" class="headerlink" title="以芒果为例的流程制作"></a>以芒果为例的流程制作</h5><p>以芒果为例，我们来讲解如何使用模块化材质技术在Substance Designer中创建逼真的芒果材质。首先，我们可以使用基础节点创建基础材质，并添加颜色、光泽度等属性。对于芒果这种有机食物材质，可以使用Noise、Tile Sampler、Pattern Generator等节点和工具，制作出各种材质细节，如果肉的纹理和颗粒感，果皮的光泽和凹凸感等。制作模块时，需要根据实际情况选择不同的节点和工具，以达到理想的效果。</p>
<p>在制作完各种材质模块后，需要将它们组合起来，创建出一个完整的芒果材质。在Substance Designer中，可以使用Blend、Transform等节点进行组合，也可以使用Functions、Switch等节点进行控制，以实现各种不同的组合效果。需要注意的是，不同的芒果品种和质量会呈现出不同的颜色和纹理特征，因此在实际制作中，需要根据实际情况进行调整和优化。通过使用模块化材质技术，在制作芒果材质时可以提高制作效率和减少工作量。</p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01pejy0nrfwotmj6qhbkas3735.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
</li>
<li><h5 id="肉类展示："><a href="#肉类展示：" class="headerlink" title="肉类展示："></a>肉类展示：</h5></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01hghgohgp3lhvnwkz0yrb3136.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<ul>
<li><h5 id="重要节点分析"><a href="#重要节点分析" class="headerlink" title="重要节点分析"></a>重要节点分析</h5><ul>
<li>Input nodes: 这些节点用于导入不同的输入图像或参数，如高度图、法线图等。在芒果材质中，这些节点可能会导入芒果的高度图和法线图等。</li>
<li>Shape nodes: 这些节点用于创建基本形状，如球体、立方体等。在芒果材质中，这些节点可能会用于创建芒果的基本形状。</li>
<li>Generator nodes: 这些节点用于生成各种纹理、噪点和图案等。在芒果材质中，这些节点可能会用于创建芒果表面的纹理和颗粒效果。</li>
<li>Filter nodes: 这些节点用于调整和过滤输入的图像或纹理。在芒果材质中，这些节点可能会用于调整芒果表面的颜色和纹理。</li>
<li>Blending nodes: 这些节点用于将不同的材质模块进行混合和组合。在芒果材质中，这些节点可能会用于将不同的纹理模块进行混合和组合。</li>
<li>Utility nodes: 这些节点用于执行一些实用功能，如旋转、变换、曲线调整等。在芒果材质中，这些节点可能会用于调整和优化芒果的颜色和纹理。</li>
<li>Output nodes: 这些节点用于输出最终的材质贴图或纹理。在芒果材质中，这些节点会生成最终的芒果材质纹理，供后续的渲染使用。</li>
</ul>
<p>需要注意的是，这些节点只是Substance Designer中可用的一部分节点，还有许多其他类型的节点可以使用，具体使用哪些节点和参数取决于实际的材质制作需求。</p>
</li>
</ul>
</li>
<li><h4 id="模块化材质绘制-Substance-Painter"><a href="#模块化材质绘制-Substance-Painter" class="headerlink" title="模块化材质绘制(Substance Painter)"></a>模块化材质绘制(Substance Painter)</h4><ul>
<li><h5 id="导入模型和材质"><a href="#导入模型和材质" class="headerlink" title="导入模型和材质"></a>导入模型和材质</h5><p>首先，我们需要将模型和材质导入到Substance Painter中。在导入材质时，可以选择预设材质或自定义材质。同时，也可以设置各种材质属性，如颜色、光泽度、金属度等。</p>
</li>
<li><h5 id="绘制基础颜色"><a href="#绘制基础颜色" class="headerlink" title="绘制基础颜色"></a>绘制基础颜色</h5><p>接着，我们可以使用Paint工具在模型上绘制基础颜色。在绘制基础颜色时，可以根据实际情况选择不同的颜色、透明度和笔刷大小等参数，以达到理想的效果。</p>
</li>
<li><h5 id="添加材质细节"><a href="#添加材质细节" class="headerlink" title="添加材质细节"></a>添加材质细节</h5><p>在绘制完基础颜色后，我们可以使用各种工具和节点来添加材质细节。Substance Painter提供了丰富的节点和工具，如Smart Materials、Smart Masks、Brushes等，可以轻松地创建各种细节效果，如纹理、凹凸、颗粒等。</p>
<p>其中，Smart Materials是一种预设的材质集合，可以通过单击一次即可应用到模型上，快速创建各种细节效果。Smart Masks则是一种快速创建遮罩的工具，可以通过各种算法（如高光、环境光、曲率等）来创建遮罩，以实现各种不同的效果。</p>
</li>
<li><h5 id="调整材质属性"><a href="#调整材质属性" class="headerlink" title="调整材质属性"></a>调整材质属性</h5><p> 我们可以直接使用SD制作好的模块化材质，并通过调节模块化材质的属性值来快速地实现不同的材质效果。这些属性值可以包括颜色、纹理、透明度、金属度、粗糙度等参数，根据实际需求进行调整，从而达到理想的效果。通过使用模块化材质，我们可以快速创建各种不同的材质效果，提高制作效率，同时也可以大大降低制作难度和成本。</p>
<p> 通过调节模块化材质的属性值，可以快速地改变材质的外观和效果。例如，在芒果材质中，可以通过调节高度图、法线图和颜色贴图等属性值，来改变芒果的纹理、凹凸和颜色等效果。同时，还可以通过添加各种滤镜和调节器来进一步调整材质的外观和效果，如曲线调整器、颜色平衡器、噪声过滤器等。这些工具和技术可以帮助我们快速地实现各种复杂的材质效果，提高制作效率和质量。</p>
 <img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/016viauekpq0ctiy3ptauu3535.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img" style="zoom:50%;"></li>
</ul>
<h3 id="3-其他工作图展示"><a href="#3-其他工作图展示" class="headerlink" title="3. 其他工作图展示"></a>3. 其他工作图展示</h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01jovk9jgqpg7n5cel6hpd3933.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01nas2yvg0e1hoic2yup6v3539.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01e9tms5fsfxa5dkj40jza3237.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></p>
<p>​		<img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01dbibkxzbudgrfkiowi673631.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01dhfaggawtx2reucbkjai3431.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></p>
</li>
</ul>
<p>​					</p>
<h2 id="四、有机食物在虚幻引擎场景中的搭建和优化"><a href="#四、有机食物在虚幻引擎场景中的搭建和优化" class="headerlink" title="四、有机食物在虚幻引擎场景中的搭建和优化"></a>四、有机食物在虚幻引擎场景中的搭建和优化</h2><p>有机食物场景的搭建需要先进行场景布局和模型搭建。在虚幻引擎中，可以使用自带的基础几何体进行场景布局，也可以使用3D建模软件（如Maya）制作更复杂的模型并导入到虚幻引擎中。</p>
<h3 id="1-材质蓝图创建"><a href="#1-材质蓝图创建" class="headerlink" title="1. 材质蓝图创建"></a>1. 材质蓝图创建</h3><p>在虚幻引擎中，可以使用材质蓝图来创建更加复杂和高级的材质效果。材质蓝图允许我们将多个节点和材质组合起来，形成一个完整的材质效果。材质蓝图提供了丰富的节点和函数，如Math、Texture Sample、Material Attributes等，我们可以通过控制它们的属性和连接不同函数节点来调整颜色、透明度、金属度、粗糙度、光照等属性，从而实现不同的材质效果。此外，材质蓝图还支持子材质球的创建，使得我们可以为模型的不同部分应用各种材质，从而达到更加精细的效果。</p>
<p>以荷包蛋为例，即使我们在Substance Painter中已经充分绘制了PBR贴图，但导入虚幻引擎后，为了实现更好的效果，我们依然需要在使用贴图的同时，对材质进行二次模块化编辑。</p>
<ul>
<li><h4 id="创建母材质"><a href="#创建母材质" class="headerlink" title="创建母材质"></a>创建母材质</h4><p>创建母材质时，可以使用基础的PBR材质作为基础，然后根据需要添加额外的节点和功能，例如细节纹理叠加、自发光效果等。母材质将作为子材质的基础，因此需要确保母材质具有足够的灵活性和可扩展性。</p>
</li>
<li><h4 id="创建子材质"><a href="#创建子材质" class="headerlink" title="创建子材质"></a>创建子材质</h4></li>
</ul>
<p>​		在虚幻引擎中，我们可以为模型创建多个子材质，每个子材质可以单独编辑和控制。在创建子材质时，可以		选择不同的母材质作为基础，然后根据需要进行调整和定制。</p>
<p>​		以荷包蛋为例，通过创建拥有透明通道的Masked材质，并为每一个贴图添加可控的变量。然后通过调整子材		质的颜色、纹理、反射率等属性来达到荷包蛋的不同部分（如蛋黄、蛋白、油脂等）的效果。同时，也可以		设置子材质的其他属性，如名称、输出、优先级、是否支持透明度等属性。</p>
<p>​		<img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01qogxkheoqpznbxie9uxl3937.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库" style="zoom: 50%;"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01udv685imnc8xbvwmrohm3531.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库" style="zoom: 50%;"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01gr9lyfclrpn0dguosm0o3438.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库" style="zoom:33%;"></p>
<p>通过这种母子材质结构，我们可以轻松地管理和编辑复杂的材质效果，同时确保材质的组织和优化。在有机		食物场景中，这种材质蓝图技术可以大大提高场景的视觉质量和真实感。</p>
<p>总之，虚幻引擎提供了丰富的材质编辑和搭建工具，可以满足各种不同的制作需求。在有机食物场景制作		中，可以通过灵活运用这些工具和技术，创造出更加逼真和精细的场景效果。</p>
<p><img lazyload src="/images/loading.svg" data-src="https://cdnb.artstation.com/p/assets/images/images/060/512/267/large/shuhang-luan-highresscreenshot00026.jpg?1678736113" alt="Aesthetic of Decay"></p>
<h2 id="五、虚幻引擎场景中的灯光与氛围搭建"><a href="#五、虚幻引擎场景中的灯光与氛围搭建" class="headerlink" title="五、虚幻引擎场景中的灯光与氛围搭建"></a>五、虚幻引擎场景中的灯光与氛围搭建</h2><p>在有机食物场景中，灯光和氛围的搭建非常重要，可以直接影响到玩家的游戏体验。在虚幻引擎中，可以使用自带的灯光系统和后期处理来创建逼真的灯光和氛围效果。</p>
<h3 id="1-使用虚幻引擎自带的灯光系统"><a href="#1-使用虚幻引擎自带的灯光系统" class="headerlink" title="1. 使用虚幻引擎自带的灯光系统"></a>1. 使用虚幻引擎自带的灯光系统</h3><p>​		在虚幻引擎中，灯光系统包括了多种灯光类型，可以满足不同场景和需求。以下是使用虚幻引擎灯光系统创		建有机食物场景时的几种主要灯光类型和技巧：</p>
<ul>
<li><strong>自然光</strong>：通过使用Directional Light（定向光）来模拟自然光源（如太阳），可以调整光线的方向、颜色和强度来改变场景的氛围。</li>
<li><strong>夜晚光</strong>：夜晚光效果可以通过调整定向光的颜色和强度，以及增加SkyLight（天空光）和Point Light（点光源）来模拟月光和其他夜间光源。</li>
<li><strong>室内光</strong>：室内光效果可以通过使用Spot Light（聚光）和Point Light（点光源）来模拟灯光，同时可以调整光线的颜色、强度和阴影参数来改变室内氛围。</li>
</ul>
<h3 id="2-使用虚幻引擎自带的后期处理功能"><a href="#2-使用虚幻引擎自带的后期处理功能" class="headerlink" title="2. 使用虚幻引擎自带的后期处理功能"></a>2. 使用虚幻引擎自带的后期处理功能</h3><p>​		在虚幻引擎中，后期处理功能可以进一步优化场景的视觉效果，以下是在有机食物场景中常用的后期处理技		巧：</p>
<ul>
<li><p><strong>色调映射</strong>：色调映射可以调整场景的整体色调，使其更符合实际环境和氛围。在有机食物场景中，可以根据场景的主题和背景选择合适的色调映射参数，如冷暖色调、高饱和度等。</p>
</li>
<li><p><strong>景深</strong>：景深可以模拟现实中的景深效果，使画面更具立体感。在有机食物场景中，可以使用景深效果突出场景中的重点区域，如特色食品、橱窗展示等。通过调整景深的焦距和范围，可以实现不同程度的景深效果。</p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01wserkqddsp0kk3akuc2e3534.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
</li>
<li><p><strong>光晕和镜头光晕</strong>：光晕和镜头光晕可以模拟光线在镜头中的散射效果，增加画面的真实感和动态感。在有机食物场景中，可以根据实际需要选择合适的光晕和镜头光晕效果，如模拟阳光的散射、室内灯光的反射等。</p>
</li>
</ul>
<h3 id="3-环境光遮蔽（Ambient-Occlusion）"><a href="#3-环境光遮蔽（Ambient-Occlusion）" class="headerlink" title="3. 环境光遮蔽（Ambient Occlusion）"></a>3. 环境光遮蔽（Ambient Occlusion）</h3><p>​		环境光遮蔽是一种全局光照技术，用于模拟物体表面的自阴影效果。在有机食物场景中，可以使用环境光遮		蔽增强物体的局部细节和立体感。通过调整环境光遮蔽的强度和范围，可以实现不同程度的自阴影效果。</p>
<h3 id="4-屏幕空间反射（Screen-Space-Reflections）"><a href="#4-屏幕空间反射（Screen-Space-Reflections）" class="headerlink" title="4. 屏幕空间反射（Screen Space Reflections）"></a>4. 屏幕空间反射（Screen Space Reflections）</h3><p>​		屏幕空间反射用于模拟物体表面的反射效果。在有机食物场景中，可以使用屏幕空间反射增强场景的真实		感，如在湿润的水果表面、玻璃橱窗等物体上生成反射效果。通过调整反射的精度和强度，可以实现不同程		度的反射效果。</p>
<h3 id="5-全局光照（Global-Illumination）"><a href="#5-全局光照（Global-Illumination）" class="headerlink" title="5. 全局光照（Global Illumination）"></a>5. 全局光照（Global Illumination）</h3><p>​		全局光照是一种真实光照模拟技术，它考虑了直接光照、间接光照以及多次反射等光线传播过程。在有机食		物场景中，全局光照可以提供更加真实的光照效果，使物体之间的亮度和色彩更加和谐统一。虚幻引擎中提		供了多种全局光照技术，如静态光照贴图（Lightmaps）、动态光照探针（Light Probes）等，可以根据场景		的需求选择合适的全局光照技术。</p>
<p>​		通过综合运用虚幻引擎自带的灯光系统和后期处理功能，以及环境光遮蔽、屏幕空间反射和全局光照等技		术，可以在有机食物场景中营造出各种不同的氛围和效果。同时，还可以根据实际需要对这些技术进行深入		研究和优化，以达到更加逼真和生动的效果。</p>
<p>总的来说，有机食物场景的制作和搭建需要综合运用多种技术和工具，在模块化材质技术、模型制作、场景搭建和灯光氛围搭建等方面进行优化和调整，以创造出更加逼真、生动的有机食物场景。</p>
<h3 id="6-场景截图"><a href="#6-场景截图" class="headerlink" title="6. 场景截图"></a>6. 场景截图</h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01w4ns4ae3r2bsxv9cmfsk3732.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/014ehjyas7j23mrkqp2h2y3834.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01tisxaiyntkjdo8odvuls3337.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01abcpqlcrcnlgg5py92is3339.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01kyueqaelyw2cmytpsh8f3935.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p>​			</p>
<h2 id="六、结论"><a href="#六、结论" class="headerlink" title="六、结论"></a>六、结论</h2><h3 id="1-总结本文的研究内容"><a href="#1-总结本文的研究内容" class="headerlink" title="1. 总结本文的研究内容"></a>1. 总结本文的研究内容</h3><p>本文研究了模块化材质技术在有机食物场景制作中的应用。首先，我们介绍了有机食物场景的概念、特点和设计要求。然后，详细讲解了使用模块化材质技术创建有机食物场景中的材质、灯光效果、以及如何利用虚幻引擎进行场景搭建。本文还讨论了有机食物场景渲染时需要考虑的因素和注意事项，并提供了实际应用案例。最后，介绍了使用Substance Suite进行有机食物材质的制作以及使用虚幻引擎进行有机食物场景的搭建、动画与渲染的应用实践。</p>
<h3 id="2-指出研究的不足和未来发展方向"><a href="#2-指出研究的不足和未来发展方向" class="headerlink" title="2. 指出研究的不足和未来发展方向"></a>2. 指出研究的不足和未来发展方向</h3><p>尽管本文取得了一定的成果，但在实际应用中仍存在一些不足之处。以下是本文研究的不足和未来发展方向：</p>
<ol>
<li>本文所涉及的案例较为有限，仅涵盖了部分有机食物场景。未来研究可以扩大案例范围，探讨更多种类的有机食物场景制作，以满足不同游戏类型和场景需求。</li>
<li>本文主要关注模块化材质技术在有机食物场景制作中的应用，未涉及其他领域。未来研究可以探讨模块化材质技术在其他场景和领域中的应用，如建筑、自然环境等，以进一步拓展技术的应用范围。</li>
<li>当前的模块化材质技术仍存在一定的局限性，例如贴图绘制的精细度、材质处理的复杂程度等。未来研究可以针对这些问题，继续优化技术手段和方法，以提高材质制作的效率和质量。</li>
<li>随着虚拟现实（VR）和增强现实（AR）等技术的发展，未来游戏场景制作将面临更高的要求。因此，研究应关注这些新技术对模块化材质技术的影响，以及如何优化模块化材质技术以满足VR和AR等应用场景的需求。</li>
</ol>
]]></content>
      <categories>
        <category>作品集</category>
        <category>文章</category>
      </categories>
      <tags>
        <tag>个人作品</tag>
        <tag>3D动画</tag>
        <tag>CG</tag>
        <tag>Shader</tag>
        <tag>Substance Designer</tag>
        <tag>UE5</tag>
        <tag>文档</tag>
        <tag>技术文章</tag>
      </tags>
  </entry>
  <entry>
    <title>Documentation：《From Farm to Game： Implementation of Modular Material Technology in Organic Food Virtual Scenes》</title>
    <url>/2023/03/13/Modular-Material-Technique/</url>
    <content><![CDATA[<h2 id="From-Farm-to-Game-Implementation-of-Modular-Material-Technology-in-Organic-Food-Virtual-Scenes"><a href="#From-Farm-to-Game-Implementation-of-Modular-Material-Technology-in-Organic-Food-Virtual-Scenes" class="headerlink" title="From Farm to Game: Implementation of Modular Material Technology in Organic Food Virtual Scenes"></a>From Farm to Game: Implementation of Modular Material Technology in Organic Food Virtual Scenes</h2><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><h3 id="1-1-Research-Background-and-Objectives"><a href="#1-1-Research-Background-and-Objectives" class="headerlink" title="1.1 Research Background and Objectives"></a>1.1 Research Background and Objectives</h3><p>In the game development process, scene design and production have always been essential aspects. The realism and level of detail directly affect game quality and player experience. With the continuous development of technology, game scene production and rendering are constantly innovating and progressing. Modular material technology is an important approach that can decompose elements or objects in the scene into multiple smaller modules for production and assembly. Each module can be individually produced and modified, thus improving production efficiency and reducing workload.</p>
<p>In game scene production, organic food scenes are an important category, including various vegetables, fruits, meats, and other food-related scenarios. In organic food scene production, in addition to considering the characteristics and forms of the food itself, attention must also be given to material production and rendering.</p>
<h3 id="1-2-Research-Methods-and-Framework"><a href="#1-2-Research-Methods-and-Framework" class="headerlink" title="1.2 Research Methods and Framework"></a>1.2 Research Methods and Framework</h3><p>This article aims to explore the application of modular material technology in the production and rendering of organic food scenes. By introducing the concept, features, and design requirements of organic food scenes, this article will explain in detail how to use modular material technology to create materials and lighting effects in organic food scenes. This includes using Maya for model production and UV unwrapping, Substance Designer for material production, and Substance Painter for texture painting and adjustment.</p>
<p>Based on this, specific case analysis will be used to demonstrate how to use modular material technology to create realistic organic food scenes. Then, the factors and precautions to be considered in the rendering of organic food scenes will be discussed, as well as application examples of modular material technology in organic food scene rendering. Finally, the article will provide a detailed introduction to the use of Substance Suite for organic food material production and the application of UE5 for organic food scene building, animation, and rendering, and showcase the display effects of organic food scenes.</p>
<h2 id="2-Product-Showcase"><a href="#2-Product-Showcase" class="headerlink" title="2. Product Showcase"></a>2. Product Showcase</h2><h3 id="2-1-Final-Animation"><a href="#2-1-Final-Animation" class="headerlink" title="2.1 Final Animation"></a>2.1 Final Animation</h3><iframe width="608" height="304" src="https://www.youtube.com/embed/u7jM_NXORmk" title="Aesthetic of Decay" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>width="900" height="450"></iframe>

<h3 id="2-2-Final-Screenshot"><a href="#2-2-Final-Screenshot" class="headerlink" title="2.2 Final Screenshot"></a>2.2 Final Screenshot</h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01pgm0te6scea7mcpdeeed3036.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<h2 id="3-Modular-Material-Technology-Application"><a href="#3-Modular-Material-Technology-Application" class="headerlink" title="3. Modular Material Technology Application"></a>3. Modular Material Technology Application</h2><h3 id="3-1-Model-Preparation-Maya"><a href="#3-1-Model-Preparation-Maya" class="headerlink" title="3.1 Model Preparation (Maya)"></a>3.1 Model Preparation (Maya)</h3><ul>
<li><h4 id="Model-Creation"><a href="#Model-Creation" class="headerlink" title="Model Creation:"></a>Model Creation:</h4><p>First, according to the design requirements and scene demands, create models in Maya. This includes modeling various organic food elements such as vegetables, fruits, and meats. Utilize the polygon modeling tools in Maya to create models based on actual needs and design requirements. During the modeling process, pay special attention to model details and forms to ensure the final model meets practical requirements and scene demands.</p>
</li>
<li><h4 id="UV-Unwrapping"><a href="#UV-Unwrapping" class="headerlink" title="UV Unwrapping:"></a>UV Unwrapping:</h4><p>After completing the model creation, UV unwrapping is required. UV unwrapping is the process of unfolding the 3D model surface into a 2D image, a prerequisite for material mapping and texture painting. In the UV unfolding process, use the UV editing tools in Maya to arrange and adjust the UVs for each model. During the UV layout process, pay special attention to model continuity and repeatability to ensure the final UV texture map meets practical requirements and scene demands. Simultaneously, use the UV layout tools and automatic unwrapping tools in Maya to improve UV layout efficiency and accuracy.</p>
<p>​    <img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01jcgrgxiv9lktpu9dwc1w3331.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
</li>
</ul>
<p>​				  </p>
<h3 id="3-2-Modular-material-technology"><a href="#3-2-Modular-material-technology" class="headerlink" title="3.2 Modular material technology"></a>3.2 Modular material technology</h3><p>In the production of organic food scenes, texture mapping is crucial. To create realistic organic materials, use two professional texture production software, Substance Designer and Substance Painter. By using them, the efficiency and quality of texture map production can be effectively improved.</p>
<h4 id="3-1-Material-Texture-Analysis"><a href="#3-1-Material-Texture-Analysis" class="headerlink" title="3.1 Material Texture Analysis"></a>3.1 Material Texture Analysis</h4><p>Taking a mango as an example, organic food material has complex colors and texture details. The following is an analysis of this material and how to use node painting in Substance Designer to create this material:</p>
<ul>
<li><h5 id="Color-Variation-and-Distribution"><a href="#Color-Variation-and-Distribution" class="headerlink" title="Color Variation and Distribution"></a>Color Variation and Distribution</h5><p>The color variation and distribution of mangoes are very rich, typically presenting a mixture of yellow, orange, and red colors. Additionally, the surface color of the mango also has granular distribution, with these granular colors usually presenting dark or light dot-like distributions.</p>
<p>In Substance Designer, various nodes can be used to create complex color variations and distribution effects, such as Gradient Map and Gradient Radial. Different nodes and parameters can be chosen based on the actual situation to achieve the desired color effect. Also, Mask nodes can be used to achieve granular color distribution effects, and Noise nodes can be used to create fine noise detail effects.</p>
</li>
<li><h5 id="Texture-and-Granular-Details"><a href="#Texture-and-Granular-Details" class="headerlink" title="Texture and Granular Details"></a>Texture and Granular Details</h5><p>Mango surfaces have very rich textures and granular details, which usually present characteristics such as varying depths, different sizes, and complex shapes. The texture and granules on the mango surface are typically concentrated in the concave and convex parts of the fruit, such as around the core.</p>
<p>In Substance Designer, various nodes can be used to create complex texture and granular detail effects, such as Noise and Height to Normal. Different nodes and parameters can be chosen based on the actual situation to achieve the desired effect. Also, Mask nodes can be used to control the distribution location and size of the textures and granules to achieve a more realistic effect.</p>
<p>In summary, organic food materials like mangoes have very complex colors and texture details. By using node painting in Substance Designer, realistic mango materials can be easily created. It is essential to note that different mango varieties and qualities will present different colors and texture characteristics; therefore, adjustments and optimizations should be made based on actual situations during production.</p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01pg2bowu8sjz6dmnieuaw3138.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
</li>
<li><h5 id="Other-Food-Analysis"><a href="#Other-Food-Analysis" class="headerlink" title="Other Food Analysis"></a>Other Food Analysis</h5><ul>
<li><p><strong>Meat</strong></p>
<ul>
<li><p>Texture: Grilled meat surfaces have fascia, fiber texture, and fat distribution.</p>
</li>
<li><p>Color: Meat color ranges from reddish-brown to dark brown.</p>
</li>
<li><p>Spots: Grilled meat surfaces have some</p>
<img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01nscynuybk5dkf9ewsjkd3539.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></li>
</ul>
</li>
<li><p><strong>Fried Egg</strong></p>
<ul>
<li><p>Texture: The surface of the fried egg has a bumpy texture formed by the coagulation of proteins, while the yolk surface has tiny granular textures.</p>
</li>
<li><p>Color: The egg white is a light yellow color, and the yolk center is a deep yellow color.</p>
</li>
<li><p>Spots: The surface of the fried egg has a small number of scorch marks produced during the cooking process.</p>
</li>
<li><p>Gradient: The yolk color gradually becomes lighter from the center outwards.</p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01wqioftwezqqwwx5ssugk3831.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></p>
</li>
</ul>
</li>
<li><p><strong>Fragrant Pear</strong></p>
<ul>
<li><p>Texture: The surface of the fragrant pear has subtle skin textures.</p>
</li>
<li><p>Color: The color of the fragrant pear varies from green to yellow, reflecting the fruit’s ripeness.</p>
</li>
<li><p>Spots: The surface of the fragrant pear has some spots and scars.</p>
</li>
<li><p>Gradient: The color of the fragrant pear gradually deepens at the top of the fruit.</p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/014nopoykqaswscjel0cob3738.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
</li>
</ul>
</li>
<li><p><strong>Cheesecake</strong></p>
<ul>
<li>Color: The main color of the cheesecake is yellow.</li>
<li>Spots: The surface of the cake has holes caused by the release of carbon dioxide gas.</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01k41se8fikcjbwjeetttr3331.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></p>
</li>
</ul>
</li>
</ul>
<h4 id="3-2-Modular-Material-Creation-Substance-Designer"><a href="#3-2-Modular-Material-Creation-Substance-Designer" class="headerlink" title="3.2 Modular Material Creation (Substance Designer)"></a>3.2 Modular Material Creation (Substance Designer)</h4><p>Modular material technology allows for the decomposition of complex materials into multiple smaller modules for creation and combination. Each small module can be individually created and modified, improving efficiency and reducing workload. Substance Designer, a professional material creation software, can easily create a variety of complex modular materials.</p>
<ul>
<li><h5 id="Create-Basic-Materials"><a href="#Create-Basic-Materials" class="headerlink" title="Create Basic Materials"></a>Create Basic Materials</h5><p>First, we need to create a basic material. In Substance Designer, basic nodes (such as Gradient Map, Checker, Turbulence, etc.) can be used to create basic materials, and then add color, glossiness, and other properties. These basic nodes can be combined with other nodes to create various different materials.</p>
</li>
<li><h5 id="Create-Material-Modules"><a href="#Create-Material-Modules" class="headerlink" title="Create Material Modules"></a>Create Material Modules</h5><p>Next, we can use various nodes and tools to create material modules. Substance Designer provides a wealth of nodes and tools, such as Noise, Tile Sampler, Pattern Generator, etc., which can easily create various material details, such as textures, bumps, and particles. When creating modules, different nodes and tools can be selected according to the actual situation to achieve the desired effect.</p>
</li>
<li><h5 id="Combine-Material-Modules"><a href="#Combine-Material-Modules" class="headerlink" title="Combine Material Modules"></a>Combine Material Modules</h5><p>After creating various material modules, we need to combine them to create a complete modular material. In Substance Designer, Blend, Transform, and other nodes can be used for combination, and Functions, Switch, and other nodes can be used for control to achieve various different combination effects.</p>
</li>
<li><h5 id="Workflow-for-Creating-Mango-Material-Using-Modular-Texture"><a href="#Workflow-for-Creating-Mango-Material-Using-Modular-Texture" class="headerlink" title="Workflow for Creating Mango Material Using Modular Texture"></a>Workflow for Creating Mango Material Using Modular Texture</h5><p>Taking mango as an example, we will explain how to use modular material technology to create realistic mango materials in Substance Designer. First, we can use basic nodes to create a basic material and add color, glossiness, and other properties. For organic food materials like mangoes, Noise, Tile Sampler, Pattern Generator, and other nodes and tools can be used to create various material details, such as the texture and graininess of the flesh, and the glossiness and bumps of the skin. When creating modules, different nodes and tools should be selected according to the actual situation to achieve the desired effect.</p>
<p>After creating various material modules, they need to be combined to create a complete mango material. In Substance Designer, Blend, Transform, and other nodes can be used for combination, and Functions, Switch, and other nodes can be used for control to achieve various different combination effects. It is important to note that different mango varieties and qualities will present different colors and texture characteristics, so adjustments and optimizations should be made according to the actual situation during production. By using modular material technology, the efficiency and workload of creating mango materials can be improved.</p>
<img lazyload src="/images/loading.svg" data-src="https://cdna.artstation.com/p/assets/images/images/060/513/476/small/shuhang-luan-1678737713763.jpg?1678737750" alt="img" style="zoom:33%;">

<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01pejy0nrfwotmj6qhbkas3735.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
</li>
<li><h5 id="Meat"><a href="#Meat" class="headerlink" title="Meat:"></a>Meat:</h5><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01hghgohgp3lhvnwkz0yrb3136.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
</li>
<li><h5 id="Analysis-of-important-nodes"><a href="#Analysis-of-important-nodes" class="headerlink" title="Analysis of important nodes"></a>Analysis of important nodes</h5><ul>
<li><strong>Input nodes:</strong> These nodes are used to import different input images or parameters, such as height maps and normal maps. In the case of mango material, these nodes might import the height map and normal map of a mango.</li>
<li>Shape nodes: These nodes are used to create basic shapes, such as spheres or cubes. In the case of mango material, these nodes might be used to create the basic shape of a mango.</li>
<li><strong>Generator nodes:</strong> These nodes are used to generate various textures, noise patterns, and patterns. In the case of mango material, these nodes might be used to create the texture and grain effect on the surface of a mango.</li>
<li><strong>Filter nodes:</strong> These nodes are used to adjust and filter the input images or textures. In the case of mango material, these nodes might be used to adjust the color and texture of the surface of a mango.</li>
<li><strong>Blending nodes:</strong> These nodes are used to blend and combine different material modules. In the case of mango material, these nodes might be used to blend and combine different texture modules.</li>
<li><strong>Utility nodes:</strong> These nodes are used to perform practical functions such as rotation, transformation, and curve adjustment. In the case of mango material, these nodes might be used to adjust and optimize the color and texture of a mango.</li>
<li><strong>Output nodes:</strong> These nodes are used to output the final material texture. In the case of mango material, these nodes generate the final mango material texture for use in rendering.</li>
</ul>
<p>It should be noted that these nodes are only a part of the nodes available in Substance Designer, and many other types of nodes can be used depending on the actual material production needs.</p>
</li>
</ul>
<h4 id="3-3-Modular-Material-Painting-Substance-Painter"><a href="#3-3-Modular-Material-Painting-Substance-Painter" class="headerlink" title="3.3 Modular Material Painting (Substance Painter)"></a>3.3 Modular Material Painting (Substance Painter)</h4><ul>
<li><h5 id="Import-Model-and-Material"><a href="#Import-Model-and-Material" class="headerlink" title="Import Model and Material"></a>Import Model and Material</h5></li>
</ul>
<p>First, we need to import the model and material into Substance Painter. When importing materials, preset materials or custom materials can be selected. At the same time, material properties such as color, glossiness, and metallicity can also be set.</p>
<ul>
<li><h5 id="Paint-Basic-Color"><a href="#Paint-Basic-Color" class="headerlink" title="Paint Basic Color"></a>Paint Basic Color</h5></li>
</ul>
<p>Next, we can use the Paint tool to paint the basic color on the model. When painting the basic color, different color, transparency, and brush size parameters can be selected according to the actual situation to achieve the desired effect.</p>
<ul>
<li><h5 id="Add-Material-Details"><a href="#Add-Material-Details" class="headerlink" title="Add Material Details"></a>Add Material Details</h5><p>After painting the basic color, various tools and nodes can be used to add material details. Substance Painter provides rich tools and nodes, such as brushes, generators, smart materials, etc., which can easily add various material details such as textures, bumps, particles, etc. When adding details, different tools and nodes can be selected according to the actual situation to achieve the desired effect.</p>
<p>In summary, modular material technology can improve production efficiency and reduce workload, and Substance Designer and Substance Painter can be used to easily create and paint various complex modular materials.</p>
</li>
<li><h5 id="Adjusting-Material-Properties"><a href="#Adjusting-Material-Properties" class="headerlink" title="Adjusting Material Properties"></a>Adjusting Material Properties</h5><p>We can use pre-made modular materials in Substance Designer and adjust their properties to quickly achieve different material effects. These properties can include color, texture, transparency, metallic, roughness, and other parameters, which can be adjusted according to the specific needs to achieve the desired effect. By using modular materials, we can quickly create different material effects, improve production efficiency, and significantly reduce production difficulty and cost.</p>
<p>By adjusting the properties of modular materials, we can quickly change the appearance and effect of the materials. For example, in mango materials, we can change the texture, bumpiness, and color of the mango by adjusting the height map, normal map, and color map properties. Additionally, we can further adjust the appearance and effect of the material by adding various filters and adjusters, such as curve adjusters, color balancers, noise filters, and others. These tools and techniques can help us quickly achieve various complex material effects, improve production efficiency and quality.</p>
<img lazyload src="/images/loading.svg" data-src="https://cdnb.artstation.com/p/assets/images/images/060/513/835/small/shuhang-luan-1678738283792.jpg?1678738298" alt="img" style="zoom: 25%;"></li>
</ul>
<h4 id="3-4-Other-work-images"><a href="#3-4-Other-work-images" class="headerlink" title="3.4 Other work images"></a>3.4 Other work images</h4><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01jovk9jgqpg7n5cel6hpd3933.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01nas2yvg0e1hoic2yup6v3539.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01e9tms5fsfxa5dkj40jza3237.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></p>
<p>​		<img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01dbibkxzbudgrfkiowi673631.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01dhfaggawtx2reucbkjai3431.jpg?x-oss-process=image/format,webp/quality,q_100" alt="img"></p>
<h2 id="4-Constructing-and-Optimizing-Organic-Food-Scenes-in-Unreal-Engine"><a href="#4-Constructing-and-Optimizing-Organic-Food-Scenes-in-Unreal-Engine" class="headerlink" title="4. Constructing and Optimizing Organic Food Scenes in Unreal Engine"></a>4. Constructing and Optimizing Organic Food Scenes in Unreal Engine</h2><p>Building organic food scenes requires initial scene layout and model construction. In Unreal Engine, you can use built-in basic geometries for scene layout or create more complex models in 3D modeling software (such as Maya) and import them into Unreal Engine.</p>
<h3 id="4-1-Material-Blueprint-Creation"><a href="#4-1-Material-Blueprint-Creation" class="headerlink" title="4.1 Material Blueprint Creation"></a>4.1 Material Blueprint Creation</h3><p>In Unreal Engine, Material Blueprints can be used to create more complex and advanced material effects. Material Blueprints allow us to combine multiple nodes and materials into a complete material effect. Material Blueprints provide a wealth of nodes and functions, such as Math, Texture Sample, Material Attributes, etc. We can adjust the properties of color, transparency, metallicity, roughness, and lighting by controlling their attributes and connecting different function nodes to achieve different material effects. Furthermore, Material Blueprints also support the creation of material instances, allowing us to apply various materials to different parts of the model for more detailed effects.</p>
<p>Taking a fried egg as an example, even if we have already fully painted PBR textures in Substance Painter, after importing into Unreal Engine, we still need to perform secondary modular editing of the material while using the textures to achieve better effects.</p>
<h3 id="4-2-Create-Parent-Material"><a href="#4-2-Create-Parent-Material" class="headerlink" title="4.2 Create Parent Material"></a>4.2 Create Parent Material</h3><p>When creating a parent material, you can use a basic PBR material as a foundation and then add additional nodes and features as needed, such as detail texture overlays and emissive effects. The parent material will serve as the basis for material instances, so it’s important to ensure it has sufficient flexibility and extensibility.</p>
<h3 id="4-3-Create-Material-Instances"><a href="#4-3-Create-Material-Instances" class="headerlink" title="4.3 Create Material Instances"></a>4.3 Create Material Instances</h3><p>In Unreal Engine, we can create multiple material instances for a model, with each instance being individually editable and controllable. When creating material instances, you can choose different parent materials as the basis and then adjust and customize them as needed.</p>
<p>For example, with a fried egg, create a Masked material with a transparency channel and add controllable variables for each texture. Then, adjust the properties of color, texture, reflectivity, etc., for the different parts of the fried egg (such as the yolk, egg white, and grease) to achieve the desired effect. At the same time, you can also set other properties for material instances, such as name, output, priority, and transparency support.</p>
<p>​		<img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01qogxkheoqpznbxie9uxl3937.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库" style="zoom: 50%;"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01udv685imnc8xbvwmrohm3531.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库" style="zoom: 50%;"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01gr9lyfclrpn0dguosm0o3438.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库" style="zoom:33%;"></p>
<p>With this parent-child material structure, we can easily manage and edit complex material effects while ensuring material organization and optimization. In organic food scenes, this Material Blueprint technique can greatly improve the visual quality and realism of the scene.</p>
<p>In conclusion, Unreal Engine offers a wealth of material editing and construction tools that can meet various production requirements. In the creation of organic food scenes, we can achieve more realistic and detailed scene effects by flexibly utilizing these tools and techniques.</p>
<p><img lazyload src="/images/loading.svg" data-src="https://cdnb.artstation.com/p/assets/images/images/060/512/267/large/shuhang-luan-highresscreenshot00026.jpg?1678736113" alt="Aesthetic of Decay"></p>
<h2 id="5-Lighting-and-Atmosphere-Setup-in-Unreal-Engine-Scenes"><a href="#5-Lighting-and-Atmosphere-Setup-in-Unreal-Engine-Scenes" class="headerlink" title="5. Lighting and Atmosphere Setup in Unreal Engine Scenes"></a>5. Lighting and Atmosphere Setup in Unreal Engine Scenes</h2><p>In organic food scenes, lighting and atmosphere setup is crucial as it directly affects the player’s gaming experience. Unreal Engine comes with a built-in lighting system and post-processing features that help create realistic lighting and atmosphere effects.</p>
<h3 id="5-1-Using-Unreal-Engine’s-Built-in-Lighting-System"><a href="#5-1-Using-Unreal-Engine’s-Built-in-Lighting-System" class="headerlink" title="5.1 Using Unreal Engine’s Built-in Lighting System"></a>5.1 Using Unreal Engine’s Built-in Lighting System</h3><p>In Unreal Engine, the lighting system includes various types of lights, catering to different scenes and requirements. Here are some main light types and techniques when using Unreal Engine’s lighting system to create organic food scenes:</p>
<ul>
<li><strong>Natural Light</strong>: Use Directional Light to simulate natural light sources (such as the sun), and adjust the light direction, color, and intensity to change the scene’s atmosphere.</li>
<li><strong>Nighttime Light</strong>: Nighttime lighting can be achieved by adjusting the color and intensity of the directional light and adding SkyLight and Point Light to simulate moonlight and other nighttime light sources.</li>
<li><strong>Indoor Light</strong>: Indoor lighting can be created by using Spot Light and Point Light to simulate lamps, while also adjusting light color, intensity, and shadow parameters to alter the indoor atmosphere.</li>
</ul>
<h3 id="5-2-Using-Unreal-Engine’s-Built-in-Post-Processing-Features"><a href="#5-2-Using-Unreal-Engine’s-Built-in-Post-Processing-Features" class="headerlink" title="5.2 Using Unreal Engine’s Built-in Post-Processing Features"></a>5.2 Using Unreal Engine’s Built-in Post-Processing Features</h3><p>In Unreal Engine, post-processing features can further optimize the visual effects of a scene. Here are some common post-processing techniques used in organic food scenes:</p>
<ul>
<li><p><strong>Tone Mapping</strong>: Tone mapping adjusts the overall color tone of a scene to match the actual environment and atmosphere. In organic food scenes, select suitable tone mapping parameters based on the scene’s theme and background, such as warm and cool tones or high saturation.</p>
</li>
<li><p><strong>Depth of Field</strong>: Depth of field simulates real-world depth of field effects, adding depth to the image. In organic food scenes, use depth of field to highlight key areas, such as featured food or window displays. Adjust the focus distance and range to achieve varying levels of depth of field effects.</p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01wserkqddsp0kk3akuc2e3534.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
</li>
<li><p><strong>Lens Flare and Bloom</strong>: Lens flare and bloom simulate light scattering in the lens, adding realism and dynamism to the image. In organic food scenes, choose appropriate lens flare and bloom effects based on actual needs, such as simulating sunlight scattering or indoor light reflections.</p>
</li>
</ul>
<h3 id="5-3-Ambient-Occlusion"><a href="#5-3-Ambient-Occlusion" class="headerlink" title="5.3 Ambient Occlusion"></a>5.3 Ambient Occlusion</h3><p>Ambient Occlusion is a global illumination technique used to simulate self-shadowing effects on object surfaces. In organic food scenes, use ambient occlusion to enhance local details and depth. Adjust the intensity and range of ambient occlusion to achieve varying levels of self-shadowing effects.</p>
<h3 id="5-4-Screen-Space-Reflections"><a href="#5-4-Screen-Space-Reflections" class="headerlink" title="5.4 Screen Space Reflections"></a>5.4 Screen Space Reflections</h3><p>Screen Space Reflections simulate reflection effects on object surfaces. In organic food scenes, use screen space reflections to enhance realism, such as generating reflections on wet fruit surfaces or glass windows. Adjust the reflection accuracy and intensity to achieve varying levels of reflection effects.</p>
<h3 id="5-5-Global-Illumination"><a href="#5-5-Global-Illumination" class="headerlink" title="5.5 Global Illumination"></a>5.5 Global Illumination</h3><p>Global Illumination is a realistic lighting simulation technique that considers direct lighting, indirect lighting, and multiple reflections. In organic food scenes, global illumination provides more realistic lighting effects, making the brightness and color of objects more harmonious and unified. Unreal Engine offers various global illumination techniques, such as Lightmaps and Light Probes, allowing for selection based on scene requirements.</p>
<p>By comprehensively using Unreal Engine’s built-in lighting system, post-processing features, ambient occlusion, screen space reflections, and global illumination techniques, a variety of atmospheres and effects can be created in organic food scenes. Furthermore, these techniques can be explored and optimized as needed to achieve even more realistic and vivid effects.</p>
<h3 id="5-6-Scene-screenshot"><a href="#5-6-Scene-screenshot" class="headerlink" title="5.6 Scene screenshot"></a>5.6 Scene screenshot</h3><p><img lazyload src="/images/loading.svg" data-src="https://cdna.artstation.com/p/assets/images/images/060/511/184/large/shuhang-luan-p3-luan-material-02.jpg?1678734496" alt="Aesthetic of Decay"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://cdna.artstation.com/p/assets/images/images/060/510/972/large/shuhang-luan-p3-luan-material-04.jpg?1678734097" alt="Aesthetic of Decay"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://cdnb.artstation.com/p/assets/images/images/060/510/983/large/shuhang-luan-p3-luan-material-06.jpg?1678734102" alt="Aesthetic of Decay"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://cdna.artstation.com/p/assets/images/images/060/510/988/large/shuhang-luan-p3-luan-material-08.jpg?1678734113" alt="Aesthetic of Decay"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://cdna.artstation.com/p/assets/images/images/060/510/992/large/shuhang-luan-p3-luan-material-10.jpg?1678734120" alt="Aesthetic of Decay"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://cdnb.artstation.com/p/assets/images/images/060/510/997/large/shuhang-luan-p3-luan-material-12.jpg?1678734127" alt="Aesthetic of Decay"></p>
<h2 id="6-Conclusion"><a href="#6-Conclusion" class="headerlink" title="6. Conclusion"></a>6. Conclusion</h2><h3 id="6-1-Summarize-the-research-content-of-this-article"><a href="#6-1-Summarize-the-research-content-of-this-article" class="headerlink" title="6.1 Summarize the research content of this article"></a>6.1 Summarize the research content of this article</h3><p>This article investigates the application of modular material technology in the creation of organic food scenes. First, we introduced the concept, features, and design requirements of organic food scenes. Then, we elaborated on the use of modular material technology to create materials and lighting effects in organic food scenes, as well as how to utilize Unreal Engine for scene construction. The article also discusses factors and considerations to be taken into account when rendering organic food scenes, providing practical application examples. Lastly, we introduced the application practices of creating organic food materials using Substance Suite and building, animating, and rendering organic food scenes using Unreal Engine.</p>
<h3 id="6-2-Point-out-the-shortcomings-of-the-research-and-the-future-development-direction"><a href="#6-2-Point-out-the-shortcomings-of-the-research-and-the-future-development-direction" class="headerlink" title="6.2 Point out the shortcomings of the research and the future development direction"></a>6.2 Point out the shortcomings of the research and the future development direction</h3><p>Despite the achievements made in this article, there are still some shortcomings in practical applications. The following are the shortcomings of this research and the future development directions:</p>
<ol>
<li>The cases covered in this article are limited, only including a few organic food scenes. Future research can expand the range of cases, exploring the creation of more types of organic food scenes to meet the needs of different game genres and scene requirements.</li>
<li>This article mainly focuses on the application of modular material technology in the creation of organic food scenes and does not involve other fields. Future research can investigate the application of modular material technology in other scenes and fields, such as architecture and natural environments, to further expand the scope of technology application.</li>
<li>The current modular material technology still has certain limitations, such as the level of detail in texture painting and the complexity of material processing. Future research can address these issues by continuing to optimize techniques and methods to improve the efficiency and quality of material production.</li>
<li>With the development of technologies like virtual reality (VR) and augmented reality (AR), future game scene creation will face higher requirements. Therefore, research should focus on the impact of these new technologies on modular material technology and how to optimize modular material technology to meet the needs of VR and AR application scenarios.</li>
</ol>
<p>​			</p>
]]></content>
      <categories>
        <category>作品集</category>
        <category>文章</category>
      </categories>
      <tags>
        <tag>个人作品</tag>
        <tag>3D动画</tag>
        <tag>CG</tag>
        <tag>Shader</tag>
        <tag>Substance Designer</tag>
        <tag>UE5</tag>
        <tag>文档</tag>
        <tag>技术文章</tag>
      </tags>
  </entry>
  <entry>
    <title>作品：《风格化森林-程序化生成工具》</title>
    <url>/2023/03/18/Stylized-Forest-Tool/</url>
    <content><![CDATA[<h2 id="Introduction："><a href="#Introduction：" class="headerlink" title="Introduction："></a>Introduction：</h2><p>《风格化森林-程序化生成工具》，这是一个使用<strong>Maya Python</strong>编写的森林场景生成脚本。该脚本可以<strong>随机生成树木、草地和石头</strong>。</p>
<p>用户可以根据需要随意调整<strong>窗口</strong>的数值，控制这些植被的<strong>数量</strong>、<strong>尺寸</strong>和<strong>形状</strong>，从而快速构建出一个丰富多样的自然环境。同时，该工具还支持植被的<strong>随机化</strong>，让每一棵树、每一块石头都具有独特的形态，避免了场景中的重复感。</p>
<p>该工具内置了一套基本的<strong>材质系统</strong>，能够快速为植被分配合适的材质属性。同时，它还提供了一套基本的<strong>光照</strong>方案，包括太阳光和天空光，让用户能够在真实的光照环境下预览植被效果。</p>
<h2 id="Completed-Image："><a href="#Completed-Image：" class="headerlink" title="Completed Image："></a>Completed Image：</h2><img lazyload src="/images/loading.svg" data-src="/2023/03/18/Stylized-Forest-Tool/image-01.png" class title="This is an forest_tool image">



<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01porwyeib04vjefuhktp83139.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《风格化森林-程序化生成工具》"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01nni1yrsf5xvrxhhl5dqs3739.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《风格化森林-程序化生成工具》"><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01wpdtwiupesjnsis5shke3737.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="《风格化森林-程序化生成工具》"></p>
<h3 id="Design-Thinking："><a href="#Design-Thinking：" class="headerlink" title="Design Thinking："></a><strong>Design Thinking：</strong></h3><ol>
<li><h4 id="定义变量："><a href="#定义变量：" class="headerlink" title="定义变量："></a>定义变量：</h4><p>在这个部分，我们会定义一些用于控制场景的生成的常量和变量，例如树木、石头和草地的数量、大小范围、位置范围等。这些变量可以根据需要进行调整，以生成不同的森林场景。</p>
</li>
<li><h4 id="定义树木函数："><a href="#定义树木函数：" class="headerlink" title="定义树木函数："></a>定义树木函数：</h4><h5 id="a-创建树叶函数："><a href="#a-创建树叶函数：" class="headerlink" title="a) 创建树叶函数："></a>a) 创建树叶函数：</h5><p>该函数负责生成单个树叶的几何形状。根据参数，您可以调整树叶的形状、大小和初始位置。</p>
<h5 id="b-创建树层函数："><a href="#b-创建树层函数：" class="headerlink" title="b) 创建树层函数："></a>b) 创建树层函数：</h5><p>该函数用于创建树的一个层级，包括多个树叶。通过调整层级的高度和半径，以及树叶的数量和排列，您可以生成不同外观的树木。</p>
<h5 id="c-创建树干函数："><a href="#c-创建树干函数：" class="headerlink" title="c) 创建树干函数："></a>c) 创建树干函数：</h5><p>该函数负责生成树干的几何形状。您可以调整树干的高度、半径和细节，以创建不同类型的树干。</p>
<h5 id="d-创建石头函数："><a href="#d-创建石头函数：" class="headerlink" title="d) 创建石头函数："></a>d) 创建石头函数：</h5><p>该函数用于生成石头的几何形状。您可以调整石头的大小、形状和初始位置，以在森林中添加自然的石头元素。</p>
<h5 id="e-创建草地函数："><a href="#e-创建草地函数：" class="headerlink" title="e) 创建草地函数："></a>e) 创建草地函数：</h5><p>该函数负责生成草地的几何形状。通过调整草地的大小、高度和密度，您可以在场景中创建丰富多样的草地效果。</p>
</li>
<li><h4 id="主函数："><a href="#主函数：" class="headerlink" title="主函数："></a>主函数：</h4><p>这个函数会调用上述定义的函数，按照设定的参数和随机范围生成树木、石头和草地。您可以在主函数中设置要生成的元素数量和范围，从而创建出具有随机性和多样性的森林场景。</p>
</li>
<li><h4 id="材质设置："><a href="#材质设置：" class="headerlink" title="材质设置："></a>材质设置：</h4><p>在这个部分，我们为树叶、树干、石头和草地分别定义材质。您可以调整颜色、纹理、光泽度等属性，以达到不同的视觉效果。</p>
</li>
<li><h4 id="光照设置："><a href="#光照设置：" class="headerlink" title="光照设置："></a>光照设置：</h4><p>这个部分包括创建一个阳光和一个天空穹顶光源，并进行相关设置。阳光负责产生主要的阴影和明暗效果，而天空穹顶光源则提供全局的环境光。您可以调整光源的颜色、强度和角度，以模拟不同时间和天气条件下的光照效果。</p>
</li>
</ol>
<p>当运行此程序时，它将在Maya场景中生成树、石头和草。这些对象将根据所选顶点的位置进行随机分布。对象的形状、大小、颜色等属性也将随机生成，以创建一个多样化的环境。场景中的光源包括阳光和天空穹顶光，用于为场景提供照明。</p>
]]></content>
      <categories>
        <category>作品集</category>
        <category>程序向</category>
        <category>Python</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>个人作品</tag>
        <tag>Python</tag>
        <tag>程序向</tag>
        <tag>工具</tag>
        <tag>场景</tag>
        <tag>Maya</tag>
      </tags>
  </entry>
  <entry>
    <title>作品：《Aesthetic of Decay》-Shader Animation</title>
    <url>/2023/03/19/Aesthetic-of-Decay/</url>
    <content><![CDATA[<h3 id="Introduction："><a href="#Introduction：" class="headerlink" title="Introduction："></a>Introduction：</h3><p>《Aesthetic of Decay》，腐烂的美学，个人独立动画项目，包括Maya模型制作，SD贴图烘焙与SP材质绘制。在一个月内完成了模型、UV、材质全流程（SD+SP)、UE5- Shader、场景和灯光的全流程制作，因此整体质量受到了影响，我会在接下来的空余时间，继续深入优化贴图的细节。</p>
<h3 id="Video"><a href="#Video" class="headerlink" title="Video:"></a>Video:</h3><iframe src="//player.bilibili.com/player.html?aid=781167737&bvid=BV1d24y1u7cZ&cid=1059934345&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="900" height="450"> </iframe>



<h3 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement:"></a>Achievement:</h3><p>重点训练了<strong>Substance Designer</strong>中的<strong>程序化贴图制作</strong>，并生成大量可控的变量，以供Substance Painter中进行绘制，并着重训练了SP进入UE5中后的<strong>材质优化</strong>工作。</p>
<p>大大增强了自己对于<strong>节点式和程序化</strong>的逻辑思维能力，与同时进行的python练习作品结合，加深了对程序化和工具化的理解，更加坚定了对于技术美术方向的研究目标。</p>
<h3 id="Pipeline："><a href="#Pipeline：" class="headerlink" title="Pipeline："></a>Pipeline：</h3><p>该作品主要由Maya、Substance Designer、Substance Painter、UE5完成。</p>
<h3 id="Highres-Screenshot："><a href="#Highres-Screenshot：" class="headerlink" title="Highres Screenshot："></a>Highres Screenshot：</h3><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01pgm0te6scea7mcpdeeed3036.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01yorunatwiluixofxqqvf3535.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01wserkqddsp0kk3akuc2e3534.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01mcvpobslzb0tupgoyhqb3132.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01slkua5svxqlr65eggye43836.png?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<h3 id="Process"><a href="#Process" class="headerlink" title="Process:"></a>Process:</h3><h4 id="物品分析："><a href="#物品分析：" class="headerlink" title="物品分析："></a>物品分析：</h4><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01nscynuybk5dkf9ewsjkd3539.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/014nopoykqaswscjel0cob3738.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01wqioftwezqqwwx5ssugk3831.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01k41se8fikcjbwjeetttr3331.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01pg2bowu8sjz6dmnieuaw3138.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<h4 id="最终展示："><a href="#最终展示：" class="headerlink" title="最终展示："></a>最终展示：</h4><p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01w4ns4ae3r2bsxv9cmfsk3732.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/014ehjyas7j23mrkqp2h2y3834.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01tisxaiyntkjdo8odvuls3337.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01abcpqlcrcnlgg5py92is3339.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://img.zcool.cn/community/01kyueqaelyw2cmytpsh8f3935.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,100/format,webp/quality,q_100" alt="Aesthetic of Decay 杂七杂八图库"></p>
]]></content>
      <categories>
        <category>作品集</category>
        <category>美术向</category>
        <category>CG动画</category>
      </categories>
      <tags>
        <tag>个人作品</tag>
        <tag>3D动画</tag>
        <tag>CG</tag>
        <tag>团队作品</tag>
        <tag>Shader</tag>
        <tag>Material</tag>
      </tags>
  </entry>
  <entry>
    <title>经验笔记：UE5全局光照设置规范-影视动画方向</title>
    <url>/2023/03/19/Global-lighting-Settings-specification/</url>
    <content><![CDATA[<h1 id="Introduction："><a href="#Introduction：" class="headerlink" title="Introduction："></a>Introduction：</h1><p>UE5场景中的<strong>全局光照设置规范</strong>的经验笔记。</p>
<h1 id="Setting-Process"><a href="#Setting-Process" class="headerlink" title="Setting Process"></a>Setting Process</h1><h2 id="1-光线追踪"><a href="#1-光线追踪" class="headerlink" title="1. 光线追踪"></a>1. 光线追踪</h2><h4 id="创建项目页面-开启光线追踪"><a href="#创建项目页面-开启光线追踪" class="headerlink" title="创建项目页面 - 开启光线追踪"></a>创建项目页面 - 开启光线追踪</h4><img lazyload src="/images/loading.svg" data-src="/2023/03/19/Global-lighting-Settings-specification/01_%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA.jpg" class title="This is an lightsetting image">



<h2 id="2-项目设置"><a href="#2-项目设置" class="headerlink" title="2. 项目设置"></a>2. 项目设置</h2><h3 id="2-1-项目设置-支持平台-选择所面向平台"><a href="#2-1-项目设置-支持平台-选择所面向平台" class="headerlink" title="2.1 项目设置 - 支持平台 - 选择所面向平台"></a>2.1 项目设置 - 支持平台 - 选择所面向平台</h3><img lazyload src="/images/loading.svg" data-src="/2023/03/19/Global-lighting-Settings-specification/02_%E9%80%89%E6%8B%A9%E5%B9%B3%E5%8F%B0.jpg" class title="This is an lightsetting image">



<h3 id="2-2-项目设置-渲染-GI全局光照-x2F-反射-x2F-Lumen"><a href="#2-2-项目设置-渲染-GI全局光照-x2F-反射-x2F-Lumen" class="headerlink" title="2.2 项目设置 - 渲染 - GI全局光照&#x2F;反射&#x2F;Lumen"></a>2.2 项目设置 - 渲染 - GI全局光照&#x2F;反射&#x2F;Lumen</h3><img lazyload src="/images/loading.svg" data-src="/2023/03/19/Global-lighting-Settings-specification/03_GI%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7%E5%8F%8D%E5%B0%84Lumen.jpg" class title="This is an lightsetting image">



<h3 id="2-3-项目设置-渲染-材质-x2F-虚拟纹理-x2F-色彩空间"><a href="#2-3-项目设置-渲染-材质-x2F-虚拟纹理-x2F-色彩空间" class="headerlink" title="2.3 项目设置 - 渲染 - 材质&#x2F;虚拟纹理&#x2F;色彩空间"></a>2.3 项目设置 - 渲染 - 材质&#x2F;虚拟纹理&#x2F;色彩空间</h3><p>注：先打开“支持硬件光线追踪”，再进行以下操作</p>
<img lazyload src="/images/loading.svg" data-src="/2023/03/19/Global-lighting-Settings-specification/04_%E6%9D%90%E8%B4%A8%E8%99%9A%E6%8B%9F%E7%BA%B9%E7%90%86%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4.jpg" class title="This is an lightsetting image">



<h3 id="2-4-项目设置-渲染-优化"><a href="#2-4-项目设置-渲染-优化" class="headerlink" title="2.4 项目设置 - 渲染 -优化"></a>2.4 项目设置 - 渲染 -优化</h3><img lazyload src="/images/loading.svg" data-src="/2023/03/19/Global-lighting-Settings-specification/05_%E4%BC%98%E5%8C%96.jpg" class title="This is an lightsetting image">



<h3 id="2-5-项目设置-平台-Windows"><a href="#2-5-项目设置-平台-Windows" class="headerlink" title="2.5 项目设置 - 平台 - Windows"></a>2.5 项目设置 - 平台 - Windows</h3><img lazyload src="/images/loading.svg" data-src="/2023/03/19/Global-lighting-Settings-specification/06_%E7%9B%AE%E6%A0%87RHT.jpg" class title="This is an lightsetting image">



<h2 id="3-PostProcessVolume-Setting"><a href="#3-PostProcessVolume-Setting" class="headerlink" title="3. PostProcessVolume Setting"></a>3. PostProcessVolume Setting</h2><h3 id="3-1-全局光照"><a href="#3-1-全局光照" class="headerlink" title="3.1 全局光照"></a>3.1 全局光照</h3><img lazyload src="/images/loading.svg" data-src="/2023/03/19/Global-lighting-Settings-specification/07_%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7.jpg" class title="This is an lightsetting image">

<h3 id="3-2-反射-渲染功能"><a href="#3-2-反射-渲染功能" class="headerlink" title="3.2 反射+渲染功能"></a>3.2 反射+渲染功能</h3><img lazyload src="/images/loading.svg" data-src="/2023/03/19/Global-lighting-Settings-specification/08_%E5%8F%8D%E5%B0%84+%E6%B8%B2%E6%9F%93%E5%8A%9F%E8%83%BD.jpg" class title="This is an lightsetting image">

<h3 id="3-3-Bloom"><a href="#3-3-Bloom" class="headerlink" title="3.3 Bloom"></a>3.3 Bloom</h3><img lazyload src="/images/loading.svg" data-src="/2023/03/19/Global-lighting-Settings-specification/09_bloom.jpg" class title="This is an lightsetting image">

<h3 id="3-4-Exposure-and-EV100"><a href="#3-4-Exposure-and-EV100" class="headerlink" title="3.4 Exposure and EV100"></a>3.4 Exposure and EV100</h3><img lazyload src="/images/loading.svg" data-src="/2023/03/19/Global-lighting-Settings-specification/10_Exposure.jpg" class title="This is an lightsetting image">

<img lazyload src="/images/loading.svg" data-src="/2023/03/19/Global-lighting-Settings-specification/11_EV100.jpg" class title="This is an lightsetting image">
]]></content>
      <categories>
        <category>经验笔记</category>
        <category>美术向</category>
        <category>UE5</category>
      </categories>
      <tags>
        <tag>UE5</tag>
        <tag>全局光照</tag>
        <tag>光线追踪</tag>
        <tag>场景灯光</tag>
      </tags>
  </entry>
</search>
